{
  "address": "0xf3E6057474199179D9eFb733f2cf47F41Cc8a1ED",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IController",
          "name": "_controller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "versions",
          "type": "uint256[]"
        }
      ],
      "name": "atVersions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "Fixed18",
              "name": "price",
              "type": "int256"
            }
          ],
          "internalType": "struct IOracleProvider.OracleVersion[]",
          "name": "prices",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "contract ICollateral",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "dailyRate",
      "outputs": [
        {
          "internalType": "Fixed18",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "exposure",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "fees",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "fees",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "protocolFees",
          "type": "uint256"
        },
        {
          "internalType": "UFixed18",
          "name": "productFees",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "globalPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "oracleVersion",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "UFixed18",
                  "name": "maker",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed18",
                  "name": "taker",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Position",
              "name": "openPosition",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "UFixed18",
                  "name": "maker",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed18",
                  "name": "taker",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Position",
              "name": "closePosition",
              "type": "tuple"
            }
          ],
          "internalType": "struct PrePosition",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "UFixed18",
              "name": "maker",
              "type": "uint256"
            },
            {
              "internalType": "UFixed18",
              "name": "taker",
              "type": "uint256"
            }
          ],
          "internalType": "struct Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "info",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "enum PayoffDefinitionLib.PayoffType",
                  "name": "payoffType",
                  "type": "uint8"
                },
                {
                  "internalType": "enum PayoffDefinitionLib.PayoffDirection",
                  "name": "payoffDirection",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes30",
                  "name": "data",
                  "type": "bytes30"
                }
              ],
              "internalType": "struct PayoffDefinition",
              "name": "payoffDefinition",
              "type": "tuple"
            },
            {
              "internalType": "contract IOracleProvider",
              "name": "oracle",
              "type": "address"
            },
            {
              "internalType": "UFixed18",
              "name": "maintenance",
              "type": "uint256"
            },
            {
              "internalType": "UFixed18",
              "name": "fundingFee",
              "type": "uint256"
            },
            {
              "internalType": "UFixed18",
              "name": "makerFee",
              "type": "uint256"
            },
            {
              "internalType": "UFixed18",
              "name": "takerFee",
              "type": "uint256"
            },
            {
              "internalType": "UFixed18",
              "name": "makerLimit",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "PackedFixed18",
                  "name": "minRate",
                  "type": "int128"
                },
                {
                  "internalType": "PackedFixed18",
                  "name": "maxRate",
                  "type": "int128"
                },
                {
                  "internalType": "PackedFixed18",
                  "name": "targetRate",
                  "type": "int128"
                },
                {
                  "internalType": "PackedUFixed18",
                  "name": "targetUtilization",
                  "type": "uint128"
                }
              ],
              "internalType": "struct JumpRateUtilizationCurve",
              "name": "utilizationCurve",
              "type": "tuple"
            }
          ],
          "internalType": "struct IProduct.ProductInfo",
          "name": "_info",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "latestVersion",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "Fixed18",
              "name": "price",
              "type": "int256"
            }
          ],
          "internalType": "struct IOracleProvider.OracleVersion",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "liquidatable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "liquidating",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "maintenance",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        },
        {
          "internalType": "UFixed18",
          "name": "positionSize",
          "type": "uint256"
        }
      ],
      "name": "maintenanceRequired",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "openInterest",
      "outputs": [
        {
          "components": [
            {
              "internalType": "UFixed18",
              "name": "maker",
              "type": "uint256"
            },
            {
              "internalType": "UFixed18",
              "name": "taker",
              "type": "uint256"
            }
          ],
          "internalType": "struct Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "openInterest",
      "outputs": [
        {
          "components": [
            {
              "internalType": "UFixed18",
              "name": "maker",
              "type": "uint256"
            },
            {
              "internalType": "UFixed18",
              "name": "taker",
              "type": "uint256"
            }
          ],
          "internalType": "struct Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "position",
      "outputs": [
        {
          "components": [
            {
              "internalType": "UFixed18",
              "name": "maker",
              "type": "uint256"
            },
            {
              "internalType": "UFixed18",
              "name": "taker",
              "type": "uint256"
            }
          ],
          "internalType": "struct Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "position",
      "outputs": [
        {
          "components": [
            {
              "internalType": "UFixed18",
              "name": "maker",
              "type": "uint256"
            },
            {
              "internalType": "UFixed18",
              "name": "taker",
              "type": "uint256"
            }
          ],
          "internalType": "struct Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "pre",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "oracleVersion",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "UFixed18",
                  "name": "maker",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed18",
                  "name": "taker",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Position",
              "name": "openPosition",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "UFixed18",
                  "name": "maker",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed18",
                  "name": "taker",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Position",
              "name": "closePosition",
              "type": "tuple"
            }
          ],
          "internalType": "struct PrePosition",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "pre",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "oracleVersion",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "UFixed18",
                  "name": "maker",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed18",
                  "name": "taker",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Position",
              "name": "openPosition",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "UFixed18",
                  "name": "maker",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed18",
                  "name": "taker",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Position",
              "name": "closePosition",
              "type": "tuple"
            }
          ],
          "internalType": "struct PrePosition",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "rate",
      "outputs": [
        {
          "internalType": "Fixed18",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "shortfall",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "snapshot",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "productAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            },
            {
              "internalType": "UFixed18",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "UFixed18",
              "name": "maintenance",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "oracleVersion",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "UFixed18",
                      "name": "maker",
                      "type": "uint256"
                    },
                    {
                      "internalType": "UFixed18",
                      "name": "taker",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Position",
                  "name": "openPosition",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "UFixed18",
                      "name": "maker",
                      "type": "uint256"
                    },
                    {
                      "internalType": "UFixed18",
                      "name": "taker",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Position",
                  "name": "closePosition",
                  "type": "tuple"
                }
              ],
              "internalType": "struct PrePosition",
              "name": "pre",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "UFixed18",
                  "name": "maker",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed18",
                  "name": "taker",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Position",
              "name": "position",
              "type": "tuple"
            },
            {
              "internalType": "bool",
              "name": "liquidatable",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "liquidating",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "UFixed18",
                  "name": "maker",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed18",
                  "name": "taker",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Position",
              "name": "openInterest",
              "type": "tuple"
            },
            {
              "internalType": "UFixed18",
              "name": "fees",
              "type": "uint256"
            },
            {
              "internalType": "UFixed18",
              "name": "exposure",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerennialLens.UserProductSnapshot",
          "name": "_snapshot",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "snapshot",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "components": [
                    {
                      "internalType": "enum PayoffDefinitionLib.PayoffType",
                      "name": "payoffType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum PayoffDefinitionLib.PayoffDirection",
                      "name": "payoffDirection",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bytes30",
                      "name": "data",
                      "type": "bytes30"
                    }
                  ],
                  "internalType": "struct PayoffDefinition",
                  "name": "payoffDefinition",
                  "type": "tuple"
                },
                {
                  "internalType": "contract IOracleProvider",
                  "name": "oracle",
                  "type": "address"
                },
                {
                  "internalType": "UFixed18",
                  "name": "maintenance",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed18",
                  "name": "fundingFee",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed18",
                  "name": "makerFee",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed18",
                  "name": "takerFee",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed18",
                  "name": "makerLimit",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "PackedFixed18",
                      "name": "minRate",
                      "type": "int128"
                    },
                    {
                      "internalType": "PackedFixed18",
                      "name": "maxRate",
                      "type": "int128"
                    },
                    {
                      "internalType": "PackedFixed18",
                      "name": "targetRate",
                      "type": "int128"
                    },
                    {
                      "internalType": "PackedUFixed18",
                      "name": "targetUtilization",
                      "type": "uint128"
                    }
                  ],
                  "internalType": "struct JumpRateUtilizationCurve",
                  "name": "utilizationCurve",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IProduct.ProductInfo",
              "name": "productInfo",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "productAddress",
              "type": "address"
            },
            {
              "internalType": "Fixed18",
              "name": "rate",
              "type": "int256"
            },
            {
              "internalType": "Fixed18",
              "name": "dailyRate",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "version",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "Fixed18",
                  "name": "price",
                  "type": "int256"
                }
              ],
              "internalType": "struct IOracleProvider.OracleVersion",
              "name": "latestVersion",
              "type": "tuple"
            },
            {
              "internalType": "UFixed18",
              "name": "maintenance",
              "type": "uint256"
            },
            {
              "internalType": "UFixed18",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "UFixed18",
              "name": "shortfall",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "oracleVersion",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "UFixed18",
                      "name": "maker",
                      "type": "uint256"
                    },
                    {
                      "internalType": "UFixed18",
                      "name": "taker",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Position",
                  "name": "openPosition",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "UFixed18",
                      "name": "maker",
                      "type": "uint256"
                    },
                    {
                      "internalType": "UFixed18",
                      "name": "taker",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Position",
                  "name": "closePosition",
                  "type": "tuple"
                }
              ],
              "internalType": "struct PrePosition",
              "name": "pre",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "UFixed18",
                  "name": "maker",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed18",
                  "name": "taker",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Position",
              "name": "position",
              "type": "tuple"
            },
            {
              "internalType": "UFixed18",
              "name": "productFee",
              "type": "uint256"
            },
            {
              "internalType": "UFixed18",
              "name": "protocolFee",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "UFixed18",
                  "name": "maker",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed18",
                  "name": "taker",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Position",
              "name": "openInterest",
              "type": "tuple"
            }
          ],
          "internalType": "struct IPerennialLens.ProductSnapshot",
          "name": "_snapshot",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract IProduct[]",
          "name": "productAddresses",
          "type": "address[]"
        }
      ],
      "name": "snapshots",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "productAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            },
            {
              "internalType": "UFixed18",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "UFixed18",
              "name": "maintenance",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "oracleVersion",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "UFixed18",
                      "name": "maker",
                      "type": "uint256"
                    },
                    {
                      "internalType": "UFixed18",
                      "name": "taker",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Position",
                  "name": "openPosition",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "UFixed18",
                      "name": "maker",
                      "type": "uint256"
                    },
                    {
                      "internalType": "UFixed18",
                      "name": "taker",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Position",
                  "name": "closePosition",
                  "type": "tuple"
                }
              ],
              "internalType": "struct PrePosition",
              "name": "pre",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "UFixed18",
                  "name": "maker",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed18",
                  "name": "taker",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Position",
              "name": "position",
              "type": "tuple"
            },
            {
              "internalType": "bool",
              "name": "liquidatable",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "liquidating",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "UFixed18",
                  "name": "maker",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed18",
                  "name": "taker",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Position",
              "name": "openInterest",
              "type": "tuple"
            },
            {
              "internalType": "UFixed18",
              "name": "fees",
              "type": "uint256"
            },
            {
              "internalType": "UFixed18",
              "name": "exposure",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerennialLens.UserProductSnapshot[]",
          "name": "_snapshots",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProduct[]",
          "name": "productAddresses",
          "type": "address[]"
        }
      ],
      "name": "snapshots",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "components": [
                    {
                      "internalType": "enum PayoffDefinitionLib.PayoffType",
                      "name": "payoffType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum PayoffDefinitionLib.PayoffDirection",
                      "name": "payoffDirection",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bytes30",
                      "name": "data",
                      "type": "bytes30"
                    }
                  ],
                  "internalType": "struct PayoffDefinition",
                  "name": "payoffDefinition",
                  "type": "tuple"
                },
                {
                  "internalType": "contract IOracleProvider",
                  "name": "oracle",
                  "type": "address"
                },
                {
                  "internalType": "UFixed18",
                  "name": "maintenance",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed18",
                  "name": "fundingFee",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed18",
                  "name": "makerFee",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed18",
                  "name": "takerFee",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed18",
                  "name": "makerLimit",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "PackedFixed18",
                      "name": "minRate",
                      "type": "int128"
                    },
                    {
                      "internalType": "PackedFixed18",
                      "name": "maxRate",
                      "type": "int128"
                    },
                    {
                      "internalType": "PackedFixed18",
                      "name": "targetRate",
                      "type": "int128"
                    },
                    {
                      "internalType": "PackedUFixed18",
                      "name": "targetUtilization",
                      "type": "uint128"
                    }
                  ],
                  "internalType": "struct JumpRateUtilizationCurve",
                  "name": "utilizationCurve",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IProduct.ProductInfo",
              "name": "productInfo",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "productAddress",
              "type": "address"
            },
            {
              "internalType": "Fixed18",
              "name": "rate",
              "type": "int256"
            },
            {
              "internalType": "Fixed18",
              "name": "dailyRate",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "version",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "Fixed18",
                  "name": "price",
                  "type": "int256"
                }
              ],
              "internalType": "struct IOracleProvider.OracleVersion",
              "name": "latestVersion",
              "type": "tuple"
            },
            {
              "internalType": "UFixed18",
              "name": "maintenance",
              "type": "uint256"
            },
            {
              "internalType": "UFixed18",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "UFixed18",
              "name": "shortfall",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "oracleVersion",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "UFixed18",
                      "name": "maker",
                      "type": "uint256"
                    },
                    {
                      "internalType": "UFixed18",
                      "name": "taker",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Position",
                  "name": "openPosition",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "UFixed18",
                      "name": "maker",
                      "type": "uint256"
                    },
                    {
                      "internalType": "UFixed18",
                      "name": "taker",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Position",
                  "name": "closePosition",
                  "type": "tuple"
                }
              ],
              "internalType": "struct PrePosition",
              "name": "pre",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "UFixed18",
                  "name": "maker",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed18",
                  "name": "taker",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Position",
              "name": "position",
              "type": "tuple"
            },
            {
              "internalType": "UFixed18",
              "name": "productFee",
              "type": "uint256"
            },
            {
              "internalType": "UFixed18",
              "name": "protocolFee",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "UFixed18",
                  "name": "maker",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed18",
                  "name": "taker",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Position",
              "name": "openInterest",
              "type": "tuple"
            }
          ],
          "internalType": "struct IPerennialLens.ProductSnapshot[]",
          "name": "_snapshots",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "unclaimedIncentiveRewards",
      "outputs": [
        {
          "internalType": "Token18[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "UFixed18[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "programIds",
          "type": "uint256[]"
        }
      ],
      "name": "unclaimedIncentiveRewards",
      "outputs": [
        {
          "internalType": "Token18[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "UFixed18[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        }
      ],
      "name": "userPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "oracleVersion",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "UFixed18",
                  "name": "maker",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed18",
                  "name": "taker",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Position",
              "name": "openPosition",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "UFixed18",
                  "name": "maker",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed18",
                  "name": "taker",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Position",
              "name": "closePosition",
              "type": "tuple"
            }
          ],
          "internalType": "struct PrePosition",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "UFixed18",
              "name": "maker",
              "type": "uint256"
            },
            {
              "internalType": "UFixed18",
              "name": "taker",
              "type": "uint256"
            }
          ],
          "internalType": "struct Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5af81829a17c8d305d16b5ef0d51173f7c0c374ad7f9f2d96d1ebed19c33a037",
  "receipt": {
    "to": null,
    "from": "0x66a7fDB96C583c59597de16d8b2B989231415339",
    "contractAddress": "0xf3E6057474199179D9eFb733f2cf47F41Cc8a1ED",
    "transactionIndex": 0,
    "gasUsed": "3957334",
    "logsBloom": "0x
    "blockHash": "0xebabbd48a3162935496cb98cc305c81b5a463a8e1036c4cb68433271924ce781",
    "transactionHash": "0x5af81829a17c8d305d16b5ef0d51173f7c0c374ad7f9f2d96d1ebed19c33a037",
    "logs": [],
    "blockNumber": 1717303,
    "cumulativeGasUsed": "3957334",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x4a0f50b19b02AC927911C559629536B9a24d9314"],
  "numDeployments": 1,
  "solcInputHash": "a1de9b0f4b57f81fe4baf3160038a424",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"versions\",\"type\":\"uint256[]\"}],\"name\":\"atVersions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"Fixed18\",\"name\":\"price\",\"type\":\"int256\"}],\"internalType\":\"struct IOracleProvider.OracleVersion[]\",\"name\":\"prices\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"contract ICollateral\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"dailyRate\",\"outputs\":[{\"internalType\":\"Fixed18\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"exposure\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"protocolFees\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"productFees\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"globalPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"oracleVersion\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"openPosition\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"closePosition\",\"type\":\"tuple\"}],\"internalType\":\"struct PrePosition\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"info\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"enum PayoffDefinitionLib.PayoffType\",\"name\":\"payoffType\",\"type\":\"uint8\"},{\"internalType\":\"enum PayoffDefinitionLib.PayoffDirection\",\"name\":\"payoffDirection\",\"type\":\"uint8\"},{\"internalType\":\"bytes30\",\"name\":\"data\",\"type\":\"bytes30\"}],\"internalType\":\"struct PayoffDefinition\",\"name\":\"payoffDefinition\",\"type\":\"tuple\"},{\"internalType\":\"contract IOracleProvider\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"UFixed18\",\"name\":\"maintenance\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"fundingFee\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"makerFee\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"takerFee\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"makerLimit\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"PackedFixed18\",\"name\":\"minRate\",\"type\":\"int128\"},{\"internalType\":\"PackedFixed18\",\"name\":\"maxRate\",\"type\":\"int128\"},{\"internalType\":\"PackedFixed18\",\"name\":\"targetRate\",\"type\":\"int128\"},{\"internalType\":\"PackedUFixed18\",\"name\":\"targetUtilization\",\"type\":\"uint128\"}],\"internalType\":\"struct JumpRateUtilizationCurve\",\"name\":\"utilizationCurve\",\"type\":\"tuple\"}],\"internalType\":\"struct IProduct.ProductInfo\",\"name\":\"_info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"latestVersion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"Fixed18\",\"name\":\"price\",\"type\":\"int256\"}],\"internalType\":\"struct IOracleProvider.OracleVersion\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"liquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"liquidating\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"maintenance\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"},{\"internalType\":\"UFixed18\",\"name\":\"positionSize\",\"type\":\"uint256\"}],\"name\":\"maintenanceRequired\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"openInterest\",\"outputs\":[{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"openInterest\",\"outputs\":[{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"position\",\"outputs\":[{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"position\",\"outputs\":[{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"pre\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"oracleVersion\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"openPosition\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"closePosition\",\"type\":\"tuple\"}],\"internalType\":\"struct PrePosition\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"pre\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"oracleVersion\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"openPosition\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"closePosition\",\"type\":\"tuple\"}],\"internalType\":\"struct PrePosition\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"Fixed18\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"shortfall\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"snapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"productAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"UFixed18\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"maintenance\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"oracleVersion\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"openPosition\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"closePosition\",\"type\":\"tuple\"}],\"internalType\":\"struct PrePosition\",\"name\":\"pre\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"liquidatable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"liquidating\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"openInterest\",\"type\":\"tuple\"},{\"internalType\":\"UFixed18\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"exposure\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerennialLens.UserProductSnapshot\",\"name\":\"_snapshot\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"snapshot\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"enum PayoffDefinitionLib.PayoffType\",\"name\":\"payoffType\",\"type\":\"uint8\"},{\"internalType\":\"enum PayoffDefinitionLib.PayoffDirection\",\"name\":\"payoffDirection\",\"type\":\"uint8\"},{\"internalType\":\"bytes30\",\"name\":\"data\",\"type\":\"bytes30\"}],\"internalType\":\"struct PayoffDefinition\",\"name\":\"payoffDefinition\",\"type\":\"tuple\"},{\"internalType\":\"contract IOracleProvider\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"UFixed18\",\"name\":\"maintenance\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"fundingFee\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"makerFee\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"takerFee\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"makerLimit\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"PackedFixed18\",\"name\":\"minRate\",\"type\":\"int128\"},{\"internalType\":\"PackedFixed18\",\"name\":\"maxRate\",\"type\":\"int128\"},{\"internalType\":\"PackedFixed18\",\"name\":\"targetRate\",\"type\":\"int128\"},{\"internalType\":\"PackedUFixed18\",\"name\":\"targetUtilization\",\"type\":\"uint128\"}],\"internalType\":\"struct JumpRateUtilizationCurve\",\"name\":\"utilizationCurve\",\"type\":\"tuple\"}],\"internalType\":\"struct IProduct.ProductInfo\",\"name\":\"productInfo\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"productAddress\",\"type\":\"address\"},{\"internalType\":\"Fixed18\",\"name\":\"rate\",\"type\":\"int256\"},{\"internalType\":\"Fixed18\",\"name\":\"dailyRate\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"Fixed18\",\"name\":\"price\",\"type\":\"int256\"}],\"internalType\":\"struct IOracleProvider.OracleVersion\",\"name\":\"latestVersion\",\"type\":\"tuple\"},{\"internalType\":\"UFixed18\",\"name\":\"maintenance\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"shortfall\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"oracleVersion\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"openPosition\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"closePosition\",\"type\":\"tuple\"}],\"internalType\":\"struct PrePosition\",\"name\":\"pre\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"internalType\":\"UFixed18\",\"name\":\"productFee\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"openInterest\",\"type\":\"tuple\"}],\"internalType\":\"struct IPerennialLens.ProductSnapshot\",\"name\":\"_snapshot\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract IProduct[]\",\"name\":\"productAddresses\",\"type\":\"address[]\"}],\"name\":\"snapshots\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"productAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"UFixed18\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"maintenance\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"oracleVersion\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"openPosition\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"closePosition\",\"type\":\"tuple\"}],\"internalType\":\"struct PrePosition\",\"name\":\"pre\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"liquidatable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"liquidating\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"openInterest\",\"type\":\"tuple\"},{\"internalType\":\"UFixed18\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"exposure\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerennialLens.UserProductSnapshot[]\",\"name\":\"_snapshots\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProduct[]\",\"name\":\"productAddresses\",\"type\":\"address[]\"}],\"name\":\"snapshots\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"enum PayoffDefinitionLib.PayoffType\",\"name\":\"payoffType\",\"type\":\"uint8\"},{\"internalType\":\"enum PayoffDefinitionLib.PayoffDirection\",\"name\":\"payoffDirection\",\"type\":\"uint8\"},{\"internalType\":\"bytes30\",\"name\":\"data\",\"type\":\"bytes30\"}],\"internalType\":\"struct PayoffDefinition\",\"name\":\"payoffDefinition\",\"type\":\"tuple\"},{\"internalType\":\"contract IOracleProvider\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"UFixed18\",\"name\":\"maintenance\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"fundingFee\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"makerFee\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"takerFee\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"makerLimit\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"PackedFixed18\",\"name\":\"minRate\",\"type\":\"int128\"},{\"internalType\":\"PackedFixed18\",\"name\":\"maxRate\",\"type\":\"int128\"},{\"internalType\":\"PackedFixed18\",\"name\":\"targetRate\",\"type\":\"int128\"},{\"internalType\":\"PackedUFixed18\",\"name\":\"targetUtilization\",\"type\":\"uint128\"}],\"internalType\":\"struct JumpRateUtilizationCurve\",\"name\":\"utilizationCurve\",\"type\":\"tuple\"}],\"internalType\":\"struct IProduct.ProductInfo\",\"name\":\"productInfo\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"productAddress\",\"type\":\"address\"},{\"internalType\":\"Fixed18\",\"name\":\"rate\",\"type\":\"int256\"},{\"internalType\":\"Fixed18\",\"name\":\"dailyRate\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"Fixed18\",\"name\":\"price\",\"type\":\"int256\"}],\"internalType\":\"struct IOracleProvider.OracleVersion\",\"name\":\"latestVersion\",\"type\":\"tuple\"},{\"internalType\":\"UFixed18\",\"name\":\"maintenance\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"shortfall\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"oracleVersion\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"openPosition\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"closePosition\",\"type\":\"tuple\"}],\"internalType\":\"struct PrePosition\",\"name\":\"pre\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"internalType\":\"UFixed18\",\"name\":\"productFee\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"openInterest\",\"type\":\"tuple\"}],\"internalType\":\"struct IPerennialLens.ProductSnapshot[]\",\"name\":\"_snapshots\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"unclaimedIncentiveRewards\",\"outputs\":[{\"internalType\":\"Token18[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"UFixed18[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"programIds\",\"type\":\"uint256[]\"}],\"name\":\"unclaimedIncentiveRewards\",\"outputs\":[{\"internalType\":\"Token18[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"UFixed18[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"}],\"name\":\"userPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"oracleVersion\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"openPosition\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"closePosition\",\"type\":\"tuple\"}],\"internalType\":\"struct PrePosition\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"taker\",\"type\":\"uint256\"}],\"internalType\":\"struct Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"atVersions(address,uint256[])\":{\"params\":{\"product\":\"Product address\",\"versions\":\"Oracle versions to query\"},\"returns\":{\"prices\":\"Product prices at specified versions\"}},\"collateral()\":{\"returns\":{\"_0\":\"Protocol collateral address\"}},\"collateral(address)\":{\"params\":{\"product\":\"Product address\"},\"returns\":{\"_0\":\"Total collateral for product\"}},\"collateral(address,address)\":{\"params\":{\"account\":\"Account address\",\"product\":\"Product address\"},\"returns\":{\"_0\":\"User deposited collateral for product\"}},\"constructor\":{\"params\":{\"_controller\":\"Protocol controller address\"}},\"dailyRate(address)\":{\"params\":{\"product\":\"Product address\"},\"returns\":{\"_0\":\"Product current funding extrapolated to a daily rate\"}},\"exposure(address,address)\":{\"params\":{\"account\":\"Account address\",\"product\":\"Product address\"},\"returns\":{\"_0\":\"User's exposure (openInterest * utilization) after settle\"}},\"fees(address)\":{\"params\":{\"product\":\"Product address\"},\"returns\":{\"productFees\":\"fees accrued by the product owner\",\"protocolFees\":\"fees accrued by the protocol\"}},\"fees(address,address)\":{\"params\":{\"account\":\"Account address\",\"product\":\"Product address\"},\"returns\":{\"_0\":\"sum of all fees accrued by the account\"}},\"globalPosition(address)\":{\"params\":{\"product\":\"Product address\"},\"returns\":{\"_0\":\"Product pre-position\",\"_1\":\"Product position\"}},\"info(address)\":{\"params\":{\"product\":\"Product address\"},\"returns\":{\"_info\":\"of the product\"}},\"latestVersion(address)\":{\"params\":{\"product\":\"Product address\"},\"returns\":{\"_0\":\"Product latest price\"}},\"liquidatable(address,address)\":{\"params\":{\"account\":\"Account address\",\"product\":\"Product address\"},\"returns\":{\"_0\":\"Whether or not the user's position eligible to be liquidated\"}},\"liquidating(address,address)\":{\"params\":{\"account\":\"Account address\",\"product\":\"Product address\"},\"returns\":{\"_0\":\"Whether or not the user's position is being liquidated\"}},\"maintenance(address,address)\":{\"params\":{\"account\":\"Account address\",\"product\":\"Product address\"},\"returns\":{\"_0\":\"Maximum of user maintenance, and maintenanceNext\"}},\"maintenanceRequired(address,address,uint256)\":{\"params\":{\"account\":\"Account address\",\"positionSize\":\"size of position for maintenance calculation\",\"product\":\"Product address\"},\"returns\":{\"_0\":\"Maintenance required for position in product\"}},\"name(address)\":{\"params\":{\"product\":\"Product address\"},\"returns\":{\"_0\":\"Name of the product\"}},\"openInterest(address)\":{\"params\":{\"product\":\"Product address\"},\"returns\":{\"_0\":\"Product maker and taker position multiplied by latest price after settle\"}},\"openInterest(address,address)\":{\"params\":{\"account\":\"Account address\",\"product\":\"Product address\"},\"returns\":{\"_0\":\"User's maker or taker position multiplied by latest price after settle\"}},\"position(address)\":{\"params\":{\"product\":\"Product address\"},\"returns\":{\"_0\":\"product position\"}},\"position(address,address)\":{\"params\":{\"account\":\"Account address\",\"product\":\"Product address\"},\"returns\":{\"_0\":\"User position\"}},\"pre(address)\":{\"params\":{\"product\":\"Product address\"},\"returns\":{\"_0\":\"Product pre-position\"}},\"pre(address,address)\":{\"params\":{\"account\":\"Account address\",\"product\":\"Product address\"},\"returns\":{\"_0\":\"User pre-position\"}},\"rate(address)\":{\"params\":{\"product\":\"Product address\"},\"returns\":{\"_0\":\"Product current funding rate\"}},\"shortfall(address)\":{\"params\":{\"product\":\"Product address\"},\"returns\":{\"_0\":\"Total shortfall for product\"}},\"snapshot(address)\":{\"params\":{\"product\":\"Product address\"},\"returns\":{\"_snapshot\":\"for the product after settle\"}},\"snapshot(address,address)\":{\"params\":{\"account\":\"User addresses\",\"product\":\"Product address\"},\"returns\":{\"_snapshot\":\"UserSnapshot for the product after settle\"}},\"snapshots(address,address[])\":{\"params\":{\"account\":\"User addresses\",\"productAddresses\":\"Product addresses\"},\"returns\":{\"_snapshots\":\"UserSnapshot for each product after settle\"}},\"snapshots(address[])\":{\"params\":{\"productAddresses\":\"Product addresses\"},\"returns\":{\"_snapshots\":\"a snapshot for each product after settle\"}},\"symbol(address)\":{\"params\":{\"product\":\"Product address\"},\"returns\":{\"_0\":\"Symbol of the product\"}},\"unclaimedIncentiveRewards(address,address)\":{\"params\":{\"account\":\"Account address\",\"product\":\"Product address\"},\"returns\":{\"amounts\":\"Token amounts of unclaimed incentive rewards for given product\",\"tokens\":\"Token addresses of unclaimed incentive rewards for given product\"}},\"unclaimedIncentiveRewards(address,address,uint256[])\":{\"params\":{\"account\":\"Account address\",\"product\":\"Product address\",\"programIds\":\"Program IDs to query\"},\"returns\":{\"amounts\":\"Token amounts of unclaimed incentive rewards for given program IDs\",\"tokens\":\"Token addresses of unclaimed incentive rewards for given program IDs\"}},\"userPosition(address,address)\":{\"params\":{\"account\":\"Account address\",\"product\":\"Product address\"},\"returns\":{\"_0\":\"User pre-position\",\"_1\":\"User position\"}}},\"stateVariables\":{\"controller\":{\"return\":\"Protocol controller\",\"returns\":{\"_0\":\"Protocol controller\"}}},\"title\":\"Lens contract to conveniently pull protocol data\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"atVersions(address,uint256[])\":{\"notice\":\"Prices of product at specified versions after settle\"},\"collateral()\":{\"notice\":\"Protocol collateral address\"},\"collateral(address)\":{\"notice\":\"Product total collateral amount after settle\"},\"collateral(address,address)\":{\"notice\":\"User collateral amount for product after settle\"},\"controller()\":{\"notice\":\"Protocol controller\"},\"dailyRate(address)\":{\"notice\":\"Product funding extrapolated to a daily rate after settle\"},\"exposure(address,address)\":{\"notice\":\"User's exposure in product after settle\"},\"fees(address)\":{\"notice\":\"Fees accumulated by product and protocol treasuries after settle\"},\"fees(address,address)\":{\"notice\":\"Fees accumulated by account after settle\"},\"globalPosition(address)\":{\"notice\":\"Product pre-position and position after settle\"},\"info(address)\":{\"notice\":\"Returns the info of the provided `product`\"},\"latestVersion(address)\":{\"notice\":\"Current price of product after settle\"},\"liquidatable(address,address)\":{\"notice\":\"User liquidatble status for product after settle\"},\"liquidating(address,address)\":{\"notice\":\"User liquidating status for product after settle\"},\"maintenance(address,address)\":{\"notice\":\"User maintenance amount for product after settle\"},\"maintenanceRequired(address,address,uint256)\":{\"notice\":\"User's maintenance required for position size in product after settle\"},\"name(address)\":{\"notice\":\"Returns the name of the provided `product`\"},\"openInterest(address)\":{\"notice\":\"Product total open interest after settle\"},\"openInterest(address,address)\":{\"notice\":\"User's open interest in product after settle\"},\"position(address)\":{\"notice\":\"Product position after settle\"},\"position(address,address)\":{\"notice\":\"User position for product after settle\"},\"pre(address)\":{\"notice\":\"Product pre position after settle\"},\"pre(address,address)\":{\"notice\":\"User pre position for product after settle\"},\"rate(address)\":{\"notice\":\"Product funding rate after settle\"},\"shortfall(address)\":{\"notice\":\"Product total shortfall amount after settle\"},\"snapshot(address)\":{\"notice\":\"Returns the snapshot of the provided `product`\"},\"snapshot(address,address)\":{\"notice\":\"Returns the user snapshot for the provided `product`\"},\"snapshots(address,address[])\":{\"notice\":\"Returns the user snapshots for the provided `productAddresses`\"},\"snapshots(address[])\":{\"notice\":\"Returns the snapshots of the provided `productAddresses`\"},\"symbol(address)\":{\"notice\":\"Returns the symbol of the provided `product`\"},\"unclaimedIncentiveRewards(address,address)\":{\"notice\":\"User's unclaimed rewards for all programs for product after settle\"},\"unclaimedIncentiveRewards(address,address,uint256[])\":{\"notice\":\"User's unclaimed rewards for provided programs for product after settle\"},\"userPosition(address,address)\":{\"notice\":\"User pre-position and position for product after settle\"}},\"notice\":\"All functions should be called using `callStatic`\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lens/PerennialLens.sol\":\"PerennialLens\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@equilibria/perennial-oracle/contracts/interfaces/IOracleProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/Fixed18.sol\\\";\\n\\ninterface IOracleProvider {\\n    /// @dev A singular oracle version with its corresponding data\\n    struct OracleVersion {\\n        /// @dev The iterative version\\n        uint256 version;\\n\\n        /// @dev the timestamp of the oracle update\\n        uint256 timestamp;\\n\\n        /// @dev The oracle price of the corresponding version\\n        Fixed18 price;\\n    }\\n\\n    function sync() external returns (OracleVersion memory);\\n    function currentVersion() external view returns (OracleVersion memory);\\n    function atVersion(uint256 oracleVersion) external view returns (OracleVersion memory);\\n}\\n\",\"keccak256\":\"0xde0f20d468ba8b91addfc356e13f2c74a4dc8abe68be323942217c723775d9c1\",\"license\":\"Apache-2.0\"},\"@equilibria/root/curve/CurveMath.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../number/types/UFixed18.sol\\\";\\nimport \\\"../number/types/Fixed18.sol\\\";\\n\\n/**\\n * @title CurveMath\\n * @notice Library for managing math operations for utilization curves.\\n */\\nlibrary CurveMath {\\n    error CurveMathOutOfBoundsError();\\n\\n    /**\\n     * @notice Computes a linear interpolation between two points\\n     * @param startX First point's x-coordinate\\n     * @param startY First point's y-coordinate\\n     * @param endX Second point's x-coordinate\\n     * @param endY Second point's y-coordinate\\n     * @param targetX x-coordinate to interpolate\\n     * @return y-coordinate for `targetX` along the line from (`startX`, `startY`) -> (`endX`, `endY`)\\n     */\\n    function linearInterpolation(\\n        UFixed18 startX,\\n        Fixed18 startY,\\n        UFixed18 endX,\\n        Fixed18 endY,\\n        UFixed18 targetX\\n    ) internal pure returns (Fixed18) {\\n        if (targetX.lt(startX) || targetX.gt(endX)) revert CurveMathOutOfBoundsError();\\n\\n        UFixed18 xRange = endX.sub(startX);\\n        Fixed18 yRange = endY.sub(startY);\\n        UFixed18 xRatio = targetX.sub(startX).div(xRange);\\n        return yRange.mul(Fixed18Lib.from(xRatio)).add(startY);\\n    }\\n}\\n\",\"keccak256\":\"0x60d159f9ddf0dbe81124ecad58bba734b4cf82877637ff8d9d7f3e92f2da4ded\",\"license\":\"Apache-2.0\"},\"@equilibria/root/curve/types/JumpRateUtilizationCurve.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../CurveMath.sol\\\";\\nimport \\\"../../number/types/PackedUFixed18.sol\\\";\\nimport \\\"../../number/types/PackedFixed18.sol\\\";\\n\\n/// @dev JumpRateUtilizationCurve type\\nstruct JumpRateUtilizationCurve {\\n    PackedFixed18 minRate;\\n    PackedFixed18 maxRate;\\n    PackedFixed18 targetRate;\\n    PackedUFixed18 targetUtilization;\\n}\\nusing JumpRateUtilizationCurveLib for JumpRateUtilizationCurve global;\\ntype JumpRateUtilizationCurveStorage is bytes32;\\nusing JumpRateUtilizationCurveStorageLib for JumpRateUtilizationCurveStorage global;\\n\\n/**\\n * @title JumpRateUtilizationCurveLib\\n * @notice Library for the Jump Rate utilization curve type\\n */\\nlibrary JumpRateUtilizationCurveLib {\\n    /**\\n     * @notice Computes the corresponding rate for a utilization ratio\\n     * @param utilization The utilization ratio\\n     * @return The corresponding rate\\n     */\\n    function compute(JumpRateUtilizationCurve memory self, UFixed18 utilization) internal pure returns (Fixed18) {\\n        UFixed18 targetUtilization = self.targetUtilization.unpack();\\n        if (utilization.lt(targetUtilization)) {\\n            return CurveMath.linearInterpolation(\\n                UFixed18Lib.ZERO,\\n                self.minRate.unpack(),\\n                targetUtilization,\\n                self.targetRate.unpack(),\\n                utilization\\n            );\\n        }\\n        if (utilization.lt(UFixed18Lib.ONE)) {\\n            return CurveMath.linearInterpolation(\\n                targetUtilization,\\n                self.targetRate.unpack(),\\n                UFixed18Lib.ONE,\\n                self.maxRate.unpack(),\\n                utilization\\n            );\\n        }\\n        return self.maxRate.unpack();\\n    }\\n}\\n\\nlibrary JumpRateUtilizationCurveStorageLib {\\n    function read(JumpRateUtilizationCurveStorage self) internal view returns (JumpRateUtilizationCurve memory) {\\n        return _storagePointer(self);\\n    }\\n\\n    function store(JumpRateUtilizationCurveStorage self, JumpRateUtilizationCurve memory value) internal {\\n        JumpRateUtilizationCurve storage storagePointer = _storagePointer(self);\\n\\n        storagePointer.minRate = value.minRate;\\n        storagePointer.maxRate = value.maxRate;\\n        storagePointer.targetRate = value.targetRate;\\n        storagePointer.targetUtilization = value.targetUtilization;\\n    }\\n\\n    function _storagePointer(JumpRateUtilizationCurveStorage self)\\n    private pure returns (JumpRateUtilizationCurve storage pointer) {\\n        assembly { pointer.slot := self }\\n    }\\n}\",\"keccak256\":\"0xae202813874bc306d51b3dab8194c86f6483bb20bf1f673ddaee16aa8de567ff\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/Fixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport \\\"./UFixed18.sol\\\";\\nimport \\\"./PackedFixed18.sol\\\";\\n\\n/// @dev Fixed18 type\\ntype Fixed18 is int256;\\nusing Fixed18Lib for Fixed18 global;\\ntype Fixed18Storage is bytes32;\\nusing Fixed18StorageLib for Fixed18Storage global;\\n\\n/**\\n * @title Fixed18Lib\\n * @notice Library for the signed fixed-decimal type.\\n */\\nlibrary Fixed18Lib {\\n    error Fixed18OverflowError(uint256 value);\\n    error Fixed18PackingOverflowError(int256 value);\\n    error Fixed18PackingUnderflowError(int256 value);\\n\\n    int256 private constant BASE = 1e18;\\n    Fixed18 public constant ZERO = Fixed18.wrap(0);\\n    Fixed18 public constant ONE = Fixed18.wrap(BASE);\\n    Fixed18 public constant NEG_ONE = Fixed18.wrap(-1 * BASE);\\n    Fixed18 public constant MAX = Fixed18.wrap(type(int256).max);\\n    Fixed18 public constant MIN = Fixed18.wrap(type(int256).min);\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from an unsigned fixed-decimal\\n     * @param a Unsigned fixed-decimal\\n     * @return New signed fixed-decimal\\n     */\\n    function from(UFixed18 a) internal pure returns (Fixed18) {\\n        uint256 value = UFixed18.unwrap(a);\\n        if (value > uint256(type(int256).max)) revert Fixed18OverflowError(value);\\n        return Fixed18.wrap(int256(value));\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a sign and an unsigned fixed-decimal\\n     * @param s Sign\\n     * @param m Unsigned fixed-decimal magnitude\\n     * @return New signed fixed-decimal\\n     */\\n    function from(int256 s, UFixed18 m) internal pure returns (Fixed18) {\\n        if (s > 0) return from(m);\\n        if (s < 0) return Fixed18.wrap(-1 * Fixed18.unwrap(from(m)));\\n        return ZERO;\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a signed integer\\n     * @param a Signed number\\n     * @return New signed fixed-decimal\\n     */\\n    function from(int256 a) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(a * BASE);\\n    }\\n\\n    /**\\n     * @notice Creates a packed signed fixed-decimal from an signed fixed-decimal\\n     * @param a signed fixed-decimal\\n     * @return New packed signed fixed-decimal\\n     */\\n    function pack(Fixed18 a) internal pure returns (PackedFixed18) {\\n        int256 value = Fixed18.unwrap(a);\\n        if (value > type(int128).max) revert Fixed18PackingOverflowError(value);\\n        if (value < type(int128).min) revert Fixed18PackingUnderflowError(value);\\n        return PackedFixed18.wrap(int128(value));\\n    }\\n\\n    /**\\n     * @notice Returns whether the signed fixed-decimal is equal to zero.\\n     * @param a Signed fixed-decimal\\n     * @return Whether the signed fixed-decimal is zero.\\n     */\\n    function isZero(Fixed18 a) internal pure returns (bool) {\\n        return Fixed18.unwrap(a) == 0;\\n    }\\n\\n    /**\\n     * @notice Adds two signed fixed-decimals `a` and `b` together\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting summed signed fixed-decimal\\n     */\\n    function add(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) + Fixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts signed fixed-decimal `b` from `a`\\n     * @param a Signed fixed-decimal to subtract from\\n     * @param b Signed fixed-decimal to subtract\\n     * @return Resulting subtracted signed fixed-decimal\\n     */\\n    function sub(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) - Fixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two signed fixed-decimals `a` and `b` together\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting multiplied signed fixed-decimal\\n     */\\n    function mul(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) * Fixed18.unwrap(b) / BASE);\\n    }\\n\\n    /**\\n     * @notice Divides signed fixed-decimal `a` by `b`\\n     * @param a Signed fixed-decimal to divide\\n     * @param b Signed fixed-decimal to divide by\\n     * @return Resulting divided signed fixed-decimal\\n     */\\n    function div(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) * BASE / Fixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0`, `MAX` for `n/0`, and `MIN` for `-n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDiv(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        if (isZero(b)) {\\n            if (gt(a, ZERO)) return MAX;\\n            if (lt(a, ZERO)) return MIN;\\n            return ONE;\\n        } else {\\n            return div(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First signed fixed-decimal\\n     * @param b Signed number to multiply by\\n     * @param c Signed number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(Fixed18 a, int256 b, int256 c) internal pure returns (Fixed18) {\\n        return muldiv(a, Fixed18.wrap(b), Fixed18.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First signed fixed-decimal\\n     * @param b Signed fixed-decimal to multiply by\\n     * @param c Signed fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(Fixed18 a, Fixed18 b, Fixed18 c) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) * Fixed18.unwrap(b) / Fixed18.unwrap(c));\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is equal to `b`\\n     */\\n    function eq(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 1;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is greater than `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is greater than `b`\\n     */\\n    function gt(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 2;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is less than `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is less than `b`\\n     */\\n    function lt(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is greater than or equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is greater than or equal to `b`\\n     */\\n    function gte(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return gt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is less than or equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is less than or equal to `b`\\n     */\\n    function lte(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return lt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Compares the signed fixed-decimals `a` and `b`\\n     * @dev Returns: 2 for greater than\\n     *               1 for equal to\\n     *               0 for less than\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Compare result of `a` and `b`\\n     */\\n    function compare(Fixed18 a, Fixed18 b) internal pure returns (uint256) {\\n        (int256 au, int256 bu) = (Fixed18.unwrap(a), Fixed18.unwrap(b));\\n        if (au > bu) return 2;\\n        if (au < bu) return 0;\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns a signed fixed-decimal representing the ratio of `a` over `b`\\n     * @param a First signed number\\n     * @param b Second signed number\\n     * @return Ratio of `a` over `b`\\n     */\\n    function ratio(int256 a, int256 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(a * BASE / b);\\n    }\\n\\n    /**\\n     * @notice Returns the minimum of signed fixed-decimals `a` and `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Minimum of `a` and `b`\\n     */\\n    function min(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(SignedMath.min(Fixed18.unwrap(a), Fixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of signed fixed-decimals `a` and `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Maximum of `a` and `b`\\n     */\\n    function max(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(SignedMath.max(Fixed18.unwrap(a), Fixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Converts the signed fixed-decimal into an integer, truncating any decimal portion\\n     * @param a Signed fixed-decimal\\n     * @return Truncated signed number\\n     */\\n    function truncate(Fixed18 a) internal pure returns (int256) {\\n        return Fixed18.unwrap(a) / BASE;\\n    }\\n\\n    /**\\n     * @notice Returns the sign of the signed fixed-decimal\\n     * @dev Returns: -1 for negative\\n     *                0 for zero\\n     *                1 for positive\\n     * @param a Signed fixed-decimal\\n     * @return Sign of the signed fixed-decimal\\n     */\\n    function sign(Fixed18 a) internal pure returns (int256) {\\n        if (Fixed18.unwrap(a) > 0) return 1;\\n        if (Fixed18.unwrap(a) < 0) return -1;\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Returns the absolute value of the signed fixed-decimal\\n     * @param a Signed fixed-decimal\\n     * @return Absolute value of the signed fixed-decimal\\n     */\\n    function abs(Fixed18 a) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(SignedMath.abs(Fixed18.unwrap(a)));\\n    }\\n}\\n\\nlibrary Fixed18StorageLib {\\n    function read(Fixed18Storage self) internal view returns (Fixed18 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Fixed18Storage self, Fixed18 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x613587461ef3437ef33229cdda7d34ea746278721baf06e20b2e43977f43174d\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/PackedFixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Fixed18.sol\\\";\\n\\n/// @dev PackedFixed18 type\\ntype PackedFixed18 is int128;\\nusing PackedFixed18Lib for PackedFixed18 global;\\n\\n/**\\n * @title PackedFixed18Lib\\n * @dev A packed version of the Fixed18 which takes up half the storage space (two PackedFixed18 can be packed\\n *      into a single slot). Only valid within the range -1.7014118e+20 <= x <= 1.7014118e+20.\\n * @notice Library for the packed signed fixed-decimal type.\\n */\\nlibrary PackedFixed18Lib {\\n    PackedFixed18 public constant MAX = PackedFixed18.wrap(type(int128).max);\\n    PackedFixed18 public constant MIN = PackedFixed18.wrap(type(int128).min);\\n\\n    /**\\n     * @notice Creates an unpacked signed fixed-decimal from a packed signed fixed-decimal\\n     * @param self packed signed fixed-decimal\\n     * @return New unpacked signed fixed-decimal\\n     */\\n    function unpack(PackedFixed18 self) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(int256(PackedFixed18.unwrap(self)));\\n    }\\n}\\n\",\"keccak256\":\"0xb52960cc8e3132e45d342bbbb1c6a96219022cd8557997933bd8250170268b64\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/PackedUFixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./UFixed18.sol\\\";\\n\\n/// @dev PackedUFixed18 type\\ntype PackedUFixed18 is uint128;\\nusing PackedUFixed18Lib for PackedUFixed18 global;\\n\\n/**\\n * @title PackedUFixed18Lib\\n * @dev A packed version of the UFixed18 which takes up half the storage space (two PackedUFixed18 can be packed\\n *      into a single slot). Only valid within the range 0 <= x <= 3.4028237e+20.\\n * @notice Library for the packed unsigned fixed-decimal type.\\n */\\nlibrary PackedUFixed18Lib {\\n    PackedUFixed18 public constant MAX = PackedUFixed18.wrap(type(uint128).max);\\n\\n    /**\\n     * @notice Creates an unpacked unsigned fixed-decimal from a packed unsigned fixed-decimal\\n     * @param self packed unsigned fixed-decimal\\n     * @return New unpacked unsigned fixed-decimal\\n     */\\n    function unpack(PackedUFixed18 self) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(uint256(PackedUFixed18.unwrap(self)));\\n    }\\n}\\n\",\"keccak256\":\"0xb5c5cd32d6530b2fe75228b6be32ebcb7762f6d7988b85a6b85a289ce8256d51\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/UFixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./Fixed18.sol\\\";\\nimport \\\"./PackedUFixed18.sol\\\";\\n\\n/// @dev UFixed18 type\\ntype UFixed18 is uint256;\\nusing UFixed18Lib for UFixed18 global;\\ntype UFixed18Storage is bytes32;\\nusing UFixed18StorageLib for UFixed18Storage global;\\n\\n/**\\n * @title UFixed18Lib\\n * @notice Library for the unsigned fixed-decimal type.\\n */\\nlibrary UFixed18Lib {\\n    error UFixed18UnderflowError(int256 value);\\n    error UFixed18PackingOverflowError(uint256 value);\\n\\n    uint256 private constant BASE = 1e18;\\n    UFixed18 public constant ZERO = UFixed18.wrap(0);\\n    UFixed18 public constant ONE = UFixed18.wrap(BASE);\\n    UFixed18 public constant MAX = UFixed18.wrap(type(uint256).max);\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a signed fixed-decimal\\n     * @param a Signed fixed-decimal\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(Fixed18 a) internal pure returns (UFixed18) {\\n        int256 value = Fixed18.unwrap(a);\\n        if (value < 0) revert UFixed18UnderflowError(value);\\n        return UFixed18.wrap(uint256(value));\\n    }\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a unsigned integer\\n     * @param a Unsigned number\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(uint256 a) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(a * BASE);\\n    }\\n\\n    /**\\n     * @notice Creates a packed unsigned fixed-decimal from an unsigned fixed-decimal\\n     * @param a unsigned fixed-decimal\\n     * @return New packed unsigned fixed-decimal\\n     */\\n    function pack(UFixed18 a) internal pure returns (PackedUFixed18) {\\n        uint256 value = UFixed18.unwrap(a);\\n        if (value > type(uint128).max) revert UFixed18PackingOverflowError(value);\\n        return PackedUFixed18.wrap(uint128(value));\\n    }\\n\\n    /**\\n     * @notice Returns whether the unsigned fixed-decimal is equal to zero.\\n     * @param a Unsigned fixed-decimal\\n     * @return Whether the unsigned fixed-decimal is zero.\\n     */\\n    function isZero(UFixed18 a) internal pure returns (bool) {\\n        return UFixed18.unwrap(a) == 0;\\n    }\\n\\n    /**\\n     * @notice Adds two unsigned fixed-decimals `a` and `b` together\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting summed unsigned fixed-decimal\\n     */\\n    function add(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) + UFixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts unsigned fixed-decimal `b` from `a`\\n     * @param a Unsigned fixed-decimal to subtract from\\n     * @param b Unsigned fixed-decimal to subtract\\n     * @return Resulting subtracted unsigned fixed-decimal\\n     */\\n    function sub(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) - UFixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two unsigned fixed-decimals `a` and `b` together\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting multiplied unsigned fixed-decimal\\n     */\\n    function mul(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) * UFixed18.unwrap(b) / BASE);\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function div(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) * BASE / UFixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0` and `MAX` for `n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDiv(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        if (isZero(b)) {\\n            return isZero(a) ? ONE : MAX;\\n        } else {\\n            return div(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned number to multiply by\\n     * @param c Unsigned number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(UFixed18 a, uint256 b, uint256 c) internal pure returns (UFixed18) {\\n        return muldiv(a, UFixed18.wrap(b), UFixed18.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned fixed-decimal to multiply by\\n     * @param c Unsigned fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(UFixed18 a, UFixed18 b, UFixed18 c) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) * UFixed18.unwrap(b) / UFixed18.unwrap(c));\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is equal to `b`\\n     */\\n    function eq(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 1;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is greater than `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is greater than `b`\\n     */\\n    function gt(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 2;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is less than `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is less than `b`\\n     */\\n    function lt(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is greater than or equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is greater than or equal to `b`\\n     */\\n    function gte(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return gt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is less than or equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is less than or equal to `b`\\n     */\\n    function lte(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return lt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Compares the unsigned fixed-decimals `a` and `b`\\n     * @dev Returns: 2 for greater than\\n     *               1 for equal to\\n     *               0 for less than\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Compare result of `a` and `b`\\n     */\\n    function compare(UFixed18 a, UFixed18 b) internal pure returns (uint256) {\\n        (uint256 au, uint256 bu) = (UFixed18.unwrap(a), UFixed18.unwrap(b));\\n        if (au > bu) return 2;\\n        if (au < bu) return 0;\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns a unsigned fixed-decimal representing the ratio of `a` over `b`\\n     * @param a First unsigned number\\n     * @param b Second unsigned number\\n     * @return Ratio of `a` over `b`\\n     */\\n    function ratio(uint256 a, uint256 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(a * BASE / b);\\n    }\\n\\n    /**\\n     * @notice Returns the minimum of unsigned fixed-decimals `a` and `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Minimum of `a` and `b`\\n     */\\n    function min(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(Math.min(UFixed18.unwrap(a), UFixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of unsigned fixed-decimals `a` and `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Maximum of `a` and `b`\\n     */\\n    function max(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(Math.max(UFixed18.unwrap(a), UFixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Converts the unsigned fixed-decimal into an integer, truncating any decimal portion\\n     * @param a Unsigned fixed-decimal\\n     * @return Truncated unsigned number\\n     */\\n    function truncate(UFixed18 a) internal pure returns (uint256) {\\n        return UFixed18.unwrap(a) / BASE;\\n    }\\n}\\n\\nlibrary UFixed18StorageLib {\\n    function read(UFixed18Storage self) internal view returns (UFixed18 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(UFixed18Storage self, UFixed18 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ebef1e6c717f565b9ed545a876b5692b4007e6485c99f39d363f7405e591792\",\"license\":\"Apache-2.0\"},\"@equilibria/root/token/types/Token18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../number/types/UFixed18.sol\\\";\\n\\n/// @dev Token18\\ntype Token18 is address;\\nusing Token18Lib for Token18 global;\\ntype Token18Storage is bytes32;\\nusing Token18StorageLib for Token18Storage global;\\n\\n/**\\n * @title Token18Lib\\n * @notice Library to manage 18-decimal ERC20s that is compliant with the fixed-decimal types.\\n * @dev Maintains significant gas savings over other Token implementations since no conversion take place\\n */\\nlibrary Token18Lib {\\n    using SafeERC20 for IERC20;\\n\\n    Token18 public constant ZERO = Token18.wrap(address(0));\\n\\n    /**\\n     * @notice Returns whether a token is the zero address\\n     * @param self Token to check for\\n     * @return Whether the token is the zero address\\n     */\\n    function isZero(Token18 self) internal pure returns (bool) {\\n        return Token18.unwrap(self) == Token18.unwrap(ZERO);\\n    }\\n\\n    /**\\n     * @notice Returns whether the two tokens are equal\\n     * @param a First token to compare\\n     * @param b Second token to compare\\n     * @return Whether the two tokens are equal\\n     */\\n    function eq(Token18 a, Token18 b) internal pure returns (bool) {\\n        return Token18.unwrap(a) ==  Token18.unwrap(b);\\n    }\\n\\n    /**\\n     * @notice Approves `grantee` to spend infinite tokens from the caller\\n     * @param self Token to transfer\\n     * @param grantee Address to allow spending\\n     */\\n    function approve(Token18 self, address grantee) internal {\\n        IERC20(Token18.unwrap(self)).safeApprove(grantee, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Approves `grantee` to spend `amount` tokens from the caller\\n     * @dev There are important race conditions to be aware of when using this function\\n            with values other than 0. This will revert if moving from non-zero to non-zero amounts\\n            See https://github.com/OpenZeppelin/openzeppelin-contracts/blob/a55b7d13722e7ce850b626da2313f3e66ca1d101/contracts/token/ERC20/IERC20.sol#L57\\n     * @param self Token to transfer\\n     * @param grantee Address to allow spending\\n     * @param amount Amount of tokens to approve to spend\\n     */\\n    function approve(Token18 self, address grantee, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeApprove(grantee, UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Transfers all held tokens from the caller to the `recipient`\\n     * @param self Token to transfer\\n     * @param recipient Address to receive the tokens\\n     */\\n    function push(Token18 self, address recipient) internal {\\n        push(self, recipient, balanceOf(self, address(this)));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the caller to the `recipient`\\n     * @param self Token to transfer\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function push(Token18 self, address recipient, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeTransfer(recipient, UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to the caller\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function pull(Token18 self, address benefactor, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeTransferFrom(benefactor, address(this), UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to `recipient`\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function pullTo(Token18 self, address benefactor, address recipient, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeTransferFrom(benefactor, recipient, UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Returns the name of the token\\n     * @param self Token to check for\\n     * @return Token name\\n     */\\n    function name(Token18 self) internal view returns (string memory) {\\n        return IERC20Metadata(Token18.unwrap(self)).name();\\n    }\\n\\n    /**\\n     * @notice Returns the symbol of the token\\n     * @param self Token to check for\\n     * @return Token symbol\\n     */\\n    function symbol(Token18 self) internal view returns (string memory) {\\n        return IERC20Metadata(Token18.unwrap(self)).symbol();\\n    }\\n\\n    /**\\n     * @notice Returns the `self` token balance of the caller\\n     * @param self Token to check for\\n     * @return Token balance of the caller\\n     */\\n    function balanceOf(Token18 self) internal view returns (UFixed18) {\\n        return balanceOf(self, address(this));\\n    }\\n\\n    /**\\n     * @notice Returns the `self` token balance of `account`\\n     * @param self Token to check for\\n     * @param account Account to check\\n     * @return Token balance of the account\\n     */\\n    function balanceOf(Token18 self, address account) internal view returns (UFixed18) {\\n        return UFixed18.wrap(IERC20(Token18.unwrap(self)).balanceOf(account));\\n    }\\n}\\n\\nlibrary Token18StorageLib {\\n    function read(Token18Storage self) internal view returns (Token18 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Token18Storage self, Token18 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6b12afaece814f0ab186200a4729e93eb685a21d3e9b5a3372ff283a7ad5dc23\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb3ebde1c8d27576db912d87c3560dab14adfb9cd001be95890ec4ba035e652e7\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateral.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"@equilibria/root/number/types/Fixed18.sol\\\";\\nimport \\\"@equilibria/root/token/types/Token18.sol\\\";\\nimport \\\"./IController.sol\\\";\\nimport \\\"./IProduct.sol\\\";\\n\\ninterface ICollateral {\\n    event Deposit(address indexed user, IProduct indexed product, UFixed18 amount);\\n    event Withdrawal(address indexed user, IProduct indexed product, UFixed18 amount);\\n    event AccountSettle(IProduct indexed product, address indexed account, Fixed18 amount, UFixed18 newShortfall);\\n    event ProductSettle(IProduct indexed product, UFixed18 protocolFee, UFixed18 productFee);\\n    event Liquidation(address indexed user, IProduct indexed product, address liquidator, UFixed18 fee);\\n    event ShortfallResolution(IProduct indexed product, UFixed18 amount);\\n    event FeeClaim(address indexed account, UFixed18 amount);\\n\\n    error CollateralCantLiquidate(UFixed18 totalMaintenance, UFixed18 totalCollateral);\\n    error CollateralInsufficientCollateralError();\\n    error CollateralUnderLimitError();\\n    error CollateralZeroAddressError();\\n\\n    function token() external view returns (Token18);\\n    function fees(address account) external view returns (UFixed18);\\n    function initialize(IController controller_) external;\\n    function depositTo(address account, IProduct product, UFixed18 amount) external;\\n    function withdrawTo(address account, IProduct product, UFixed18 amount) external;\\n    function liquidate(address account, IProduct product) external;\\n    function settleAccount(address account, Fixed18 amount) external;\\n    function settleProduct(UFixed18 amount) external;\\n    function collateral(address account, IProduct product) external view returns (UFixed18);\\n    function collateral(IProduct product) external view returns (UFixed18);\\n    function shortfall(IProduct product) external view returns (UFixed18);\\n    function liquidatable(address account, IProduct product) external view returns (bool);\\n    function liquidatableNext(address account, IProduct product) external view returns (bool);\\n    function resolveShortfall(IProduct product, UFixed18 amount) external;\\n    function claimFee() external;\\n}\\n\",\"keccak256\":\"0xa5e7fdda92702f748e6eb8701e522450035a98a05e5fc1cf66d51c52e397d914\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IContractPayoffProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/Fixed18.sol\\\";\\n\\ninterface IContractPayoffProvider {\\n    function payoff(Fixed18 price) external view returns (Fixed18 payoff);\\n}\\n\",\"keccak256\":\"0xd73df106d032e976fd959ee6713240e36f54277ce5f215eaec8d5a2c6720a86b\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\\\";\\nimport \\\"./ICollateral.sol\\\";\\nimport \\\"./IIncentivizer.sol\\\";\\nimport \\\"./IProduct.sol\\\";\\nimport \\\"./types/PayoffDefinition.sol\\\";\\n\\ninterface IController {\\n    /// @dev Coordinator of a one or many products\\n    struct Coordinator {\\n        /// @dev Pending owner of the product, can accept ownership\\n        address pendingOwner;\\n\\n        /// @dev Owner of the product, allowed to update select parameters\\n        address owner;\\n\\n        /// @dev Treasury of the product, collects fees\\n        address treasury;\\n    }\\n\\n    event CollateralUpdated(ICollateral newCollateral);\\n    event IncentivizerUpdated(IIncentivizer newIncentivizer);\\n    event ProductBeaconUpdated(IBeacon newProductBeacon);\\n    event ProtocolFeeUpdated(UFixed18 newProtocolFee);\\n    event MinFundingFeeUpdated(UFixed18 newMinFundingFee);\\n    event LiquidationFeeUpdated(UFixed18 newLiquidationFee);\\n    event IncentivizationFeeUpdated(UFixed18 newIncentivizationFee);\\n    event MinCollateralUpdated(UFixed18 newMinCollateral);\\n    event ProgramsPerProductUpdated(uint256 newProgramsPerProduct);\\n    event PauserUpdated(address newPauser);\\n    event PausedUpdated(bool newPaused);\\n    event CoordinatorPendingOwnerUpdated(uint256 indexed coordinatorId, address newPendingOwner);\\n    event CoordinatorOwnerUpdated(uint256 indexed coordinatorId, address newOwner);\\n    event CoordinatorTreasuryUpdated(uint256 indexed coordinatorId, address newTreasury);\\n    event CoordinatorCreated(uint256 indexed coordinatorId, address owner);\\n    event ProductCreated(IProduct indexed product, IProduct.ProductInfo productInfo);\\n\\n    error ControllerNoZeroCoordinatorError();\\n    error ControllerNotPauserError();\\n    error ControllerNotOwnerError(uint256 controllerId);\\n    error ControllerNotPendingOwnerError(uint256 controllerId);\\n    error ControllerInvalidProtocolFeeError();\\n    error ControllerInvalidMinFundingFeeError();\\n    error ControllerInvalidLiquidationFeeError();\\n    error ControllerInvalidIncentivizationFeeError();\\n    error ControllerNotContractAddressError();\\n\\n    function collateral() external view returns (ICollateral);\\n    function incentivizer() external view returns (IIncentivizer);\\n    function productBeacon() external view returns (IBeacon);\\n    function coordinators(uint256 collateralId) external view returns (Coordinator memory);\\n    function coordinatorFor(IProduct product) external view returns (uint256);\\n    function protocolFee() external view returns (UFixed18);\\n    function minFundingFee() external view returns (UFixed18);\\n    function liquidationFee() external view returns (UFixed18);\\n    function incentivizationFee() external view returns (UFixed18);\\n    function minCollateral() external view returns (UFixed18);\\n    function programsPerProduct() external view returns (uint256);\\n    function pauser() external view returns (address);\\n    function paused() external view returns (bool);\\n    function initialize(ICollateral collateral_, IIncentivizer incentivizer_, IBeacon productBeacon_) external;\\n    function createCoordinator() external returns (uint256);\\n    function updateCoordinatorPendingOwner(uint256 coordinatorId, address newPendingOwner) external;\\n    function acceptCoordinatorOwner(uint256 coordinatorId) external;\\n    function updateCoordinatorTreasury(uint256 coordinatorId, address newTreasury) external;\\n    function createProduct(uint256 coordinatorId, IProduct.ProductInfo calldata productInfo) external returns (IProduct);\\n    function updateCollateral(ICollateral newCollateral) external;\\n    function updateIncentivizer(IIncentivizer newIncentivizer) external;\\n    function updateProductBeacon(IBeacon newProductBeacon) external;\\n    function updateProtocolFee(UFixed18 newProtocolFee) external;\\n    function updateMinFundingFee(UFixed18 newMinFundingFee) external;\\n    function updateLiquidationFee(UFixed18 newLiquidationFee) external;\\n    function updateIncentivizationFee(UFixed18 newIncentivizationFee) external;\\n    function updateMinCollateral(UFixed18 newMinCollateral) external;\\n    function updateProgramsPerProduct(uint256 newProductsPerProduct) external;\\n    function updatePauser(address newPauser) external;\\n    function updatePaused(bool newPaused) external;\\n    function isProduct(IProduct product) external view returns (bool);\\n    function owner() external view returns (address);\\n    function owner(uint256 coordinatorId) external view returns (address);\\n    function owner(IProduct product) external view returns (address);\\n    function treasury() external view returns (address);\\n    function treasury(uint256 coordinatorId) external view returns (address);\\n    function treasury(IProduct product) external view returns (address);\\n}\\n\",\"keccak256\":\"0xaabd3740f2265499eea7aad9bd94f9892f53241e5dccce9a50c0e43ed2a6a7cc\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IIncentivizer.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/token/types/Token18.sol\\\";\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"@equilibria/perennial-oracle/contracts/interfaces/IOracleProvider.sol\\\";\\nimport \\\"./types/ProgramInfo.sol\\\";\\nimport \\\"./IController.sol\\\";\\nimport \\\"./IProduct.sol\\\";\\n\\ninterface IIncentivizer {\\n    event ProgramCreated(IProduct indexed product, uint256 indexed programId, ProgramInfo programInfo, UFixed18 programFeeAmount);\\n    event ProgramStarted(IProduct indexed product, uint256 indexed programId, uint256 version);\\n    event ProgramComplete(IProduct indexed product, uint256 indexed programId, uint256 version);\\n    event Claim(IProduct indexed product, address indexed account, uint256 indexed programId, UFixed18 amount);\\n    event FeeClaim(Token18 indexed token, UFixed18 amount);\\n\\n    error IncentivizerNotAllowedError(IProduct product);\\n    error IncentivizerTooManyProgramsError();\\n    error IncentivizerNotProgramOwnerError(IProduct product, uint256 programId);\\n    error IncentivizerInvalidProgramError(IProduct product, uint256 programId);\\n    error IncentivizerBatchClaimArgumentMismatchError();\\n\\n    function programInfos(IProduct product, uint256 programId) external view returns (ProgramInfo memory);\\n    function fees(Token18 token) external view returns (UFixed18);\\n    function initialize(IController controller_) external;\\n    function create(IProduct product, ProgramInfo calldata info) external returns (uint256);\\n    function complete(IProduct product, uint256 programId) external;\\n    function sync(IOracleProvider.OracleVersion memory currentOracleVersion) external;\\n    function syncAccount(address account, IOracleProvider.OracleVersion memory currentOracleVersion) external;\\n    function claim(IProduct product, uint256[] calldata programIds) external;\\n    function claim(IProduct[] calldata products, uint256[][] calldata programIds) external;\\n    function claimFee(Token18[] calldata tokens) external;\\n    function active(IProduct product) external view returns (uint256);\\n    function count(IProduct product) external view returns (uint256);\\n    function unclaimed(IProduct product, address account, uint256 programId) external view returns (UFixed18);\\n    function available(IProduct product, uint256 programId) external view returns (UFixed18);\\n    function versionStarted(IProduct product, uint256 programId) external view returns (uint256);\\n    function versionComplete(IProduct product, uint256 programId) external view returns (uint256);\\n    function owner(IProduct product, uint256 programId) external view returns (address);\\n    function treasury(IProduct product, uint256 programId) external view returns (address);\\n}\\n\",\"keccak256\":\"0x2f95de90dbb3ad35dbfef304f765a622bffff9229868d2898eca8d49c78e8c2c\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IParamProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"@equilibria/root/curve/types/JumpRateUtilizationCurve.sol\\\";\\n\\ninterface IParamProvider {\\n    event MaintenanceUpdated(UFixed18 newMaintenance);\\n    event FundingFeeUpdated(UFixed18 newFundingFee);\\n    event MakerFeeUpdated(UFixed18 newMakerFee);\\n    event TakerFeeUpdated(UFixed18 newTakerFee);\\n    event MakerLimitUpdated(UFixed18 newMakerLimit);\\n    event JumpRateUtilizationCurveUpdated(\\n        Fixed18 minRate,\\n        Fixed18 maxRate,\\n        Fixed18 targetRate,\\n        UFixed18 targetUtilization\\n    );\\n\\n    error ParamProviderInvalidMakerFee();\\n    error ParamProviderInvalidTakerFee();\\n    error ParamProviderInvalidFundingFee();\\n    \\n    function maintenance() external view returns (UFixed18);\\n    function updateMaintenance(UFixed18 newMaintenance) external;\\n    function fundingFee() external view returns (UFixed18);\\n    function updateFundingFee(UFixed18 newFundingFee) external;\\n    function makerFee() external view returns (UFixed18);\\n    function updateMakerFee(UFixed18 newMakerFee) external;\\n    function takerFee() external view returns (UFixed18);\\n    function updateTakerFee(UFixed18 newTakerFee) external;\\n    function makerLimit() external view returns (UFixed18);\\n    function updateMakerLimit(UFixed18 newMakerLimit) external;\\n    function utilizationCurve() external view returns (JumpRateUtilizationCurve memory);\\n    function updateUtilizationCurve(JumpRateUtilizationCurve memory newUtilizationCurve) external;\\n}\\n\",\"keccak256\":\"0x2e2d40d0cf55f167118867e41f740b9b40614d05da50fc9bc33a8cede3eaf03e\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IPayoffProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/Fixed18.sol\\\";\\nimport \\\"@equilibria/perennial-oracle/contracts/interfaces/IOracleProvider.sol\\\";\\nimport \\\"./types/PayoffDefinition.sol\\\";\\n\\ninterface IPayoffProvider {\\n    error PayoffProviderInvalidOracle();\\n    error PayoffProviderInvalidPayoffDefinitionError();\\n\\n    function oracle() external view returns (IOracleProvider);\\n    function payoffDefinition() external view returns (PayoffDefinition memory);\\n    function currentVersion() external view returns (IOracleProvider.OracleVersion memory);\\n    function atVersion(uint256 oracleVersion) external view returns (IOracleProvider.OracleVersion memory);\\n}\\n\",\"keccak256\":\"0xb83d80d624aa9431763f80ecb4bf0214803e25334a7419d954f929e5d0ee7467\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IPerennialLens.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.15;\\n\\nimport \\\"@equilibria/perennial-oracle/contracts/interfaces/IOracleProvider.sol\\\";\\nimport \\\"./IProduct.sol\\\";\\nimport \\\"./ICollateral.sol\\\";\\nimport \\\"./IController.sol\\\";\\n\\n/**\\n * @title Lens contract to conveniently pull protocol, product, and userproduct data\\n * @notice All functions should be called using `callStatic`\\n */\\ninterface IPerennialLens {\\n    /// @dev Snapshot of Product information\\n    struct ProductSnapshot {\\n        IProduct.ProductInfo productInfo;\\n        address productAddress;\\n        Fixed18 rate;\\n        Fixed18 dailyRate;\\n        IOracleProvider.OracleVersion latestVersion;\\n        UFixed18 maintenance;\\n        UFixed18 collateral;\\n        UFixed18 shortfall;\\n        PrePosition pre;\\n        Position position;\\n        UFixed18 productFee;\\n        UFixed18 protocolFee;\\n        Position openInterest;\\n    }\\n\\n    /// @dev Snapshot of User state for a Product\\n    struct UserProductSnapshot {\\n        address productAddress;\\n        address userAddress;\\n        UFixed18 collateral;\\n        UFixed18 maintenance;\\n        PrePosition pre;\\n        Position position;\\n        bool liquidatable;\\n        bool liquidating;\\n        Position openInterest;\\n        UFixed18 fees;\\n        UFixed18 exposure;\\n    }\\n\\n    // Protocol Values\\n    function controller() external view returns (IController);\\n    function collateral() external view returns (ICollateral);\\n\\n    // Snapshot Functions for batch values\\n    function snapshots(IProduct[] calldata productAddresses) external returns (ProductSnapshot[] memory);\\n    function snapshot(IProduct product) external returns (ProductSnapshot memory);\\n    function snapshots(address account, IProduct[] calldata productAddresses) external returns (UserProductSnapshot[] memory);\\n    function snapshot(address account, IProduct product) external returns (UserProductSnapshot memory);\\n\\n    // Product Values\\n    function name(IProduct product) external view returns (string memory);\\n    function symbol(IProduct product) external view returns (string memory);\\n    function info(IProduct product) external view returns (IProduct.ProductInfo memory _info);\\n    function collateral(IProduct product) external returns (UFixed18);\\n    function shortfall(IProduct product) external returns (UFixed18);\\n    function pre(IProduct product) external returns (PrePosition memory);\\n    function fees(IProduct product) external returns (UFixed18 protocolFees, UFixed18 productFees);\\n    function position(IProduct product) external returns (Position memory);\\n    function globalPosition(IProduct product) external returns (PrePosition memory, Position memory);\\n    function latestVersion(IProduct product) external returns (IOracleProvider.OracleVersion memory);\\n    function atVersions(IProduct product, uint[] memory versions) external returns (IOracleProvider.OracleVersion[] memory prices);\\n    function rate(IProduct product) external returns (Fixed18);\\n    function openInterest(IProduct product) external returns (Position memory);\\n    function dailyRate(IProduct product) external returns (Fixed18);\\n\\n    // UserProduct Values\\n    function collateral(address account, IProduct product) external returns (UFixed18);\\n    function maintenance(address account, IProduct product) external returns (UFixed18);\\n    function liquidatable(address account, IProduct product) external returns (bool);\\n    function liquidating(address account, IProduct product) external returns (bool);\\n    function pre(address account, IProduct product) external returns (PrePosition memory);\\n    function position(address account, IProduct product) external returns (Position memory);\\n    function userPosition(address account, IProduct product) external returns (PrePosition memory, Position memory);\\n    function fees(address account, IProduct product) external returns (UFixed18);\\n    function openInterest(address account, IProduct product) external returns (Position memory);\\n    function exposure(address account, IProduct product) external returns (UFixed18);\\n    function maintenanceRequired(\\n        address account,\\n        IProduct product,\\n        UFixed18 positionSize\\n    ) external returns (UFixed18);\\n    function unclaimedIncentiveRewards(address account, IProduct product)\\n        external\\n        returns (Token18[] memory tokens, UFixed18[] memory amounts);\\n    function unclaimedIncentiveRewards(\\n        address account,\\n        IProduct product,\\n        uint256[] calldata programIds\\n    ) external returns (Token18[] memory tokens, UFixed18[] memory amounts);\\n}\\n\",\"keccak256\":\"0x620401075cd7f65213980cbb4aee48867ad1e98ab361c0589d15d838e0ed13aa\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IProduct.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"@equilibria/root/curve/types/JumpRateUtilizationCurve.sol\\\";\\nimport \\\"./IPayoffProvider.sol\\\";\\nimport \\\"./IParamProvider.sol\\\";\\nimport \\\"./types/PayoffDefinition.sol\\\";\\nimport \\\"./types/Position.sol\\\";\\nimport \\\"./types/PrePosition.sol\\\";\\nimport \\\"./types/Accumulator.sol\\\";\\n\\ninterface IProduct is IPayoffProvider, IParamProvider {\\n    /// @dev Product Creation parameters\\n    struct ProductInfo {\\n        /// @dev name of the product\\n        string name;\\n\\n        /// @dev symbol of the product\\n        string symbol;\\n\\n        /// @dev product payoff definition\\n        PayoffDefinition payoffDefinition;\\n\\n        /// @dev oracle address\\n        IOracleProvider oracle;\\n\\n        /// @dev product maintenance ratio\\n        UFixed18 maintenance;\\n\\n        /// @dev product funding fee\\n        UFixed18 fundingFee;\\n\\n        /// @dev product maker fee\\n        UFixed18 makerFee;\\n\\n        /// @dev product taker fee\\n        UFixed18 takerFee;\\n\\n        /// @dev product maker limit\\n        UFixed18 makerLimit;\\n\\n        /// @dev utulization curve definition\\n        JumpRateUtilizationCurve utilizationCurve;\\n    }\\n\\n    event Settle(uint256 preVersion, uint256 toVersion);\\n    event AccountSettle(address indexed account, uint256 preVersion, uint256 toVersion);\\n    event MakeOpened(address indexed account, uint256 version, UFixed18 amount);\\n    event TakeOpened(address indexed account, uint256 version, UFixed18 amount);\\n    event MakeClosed(address indexed account, uint256 version, UFixed18 amount);\\n    event TakeClosed(address indexed account, uint256 version, UFixed18 amount);\\n    event ClosedUpdated(bool indexed newClosed, uint256 version);\\n\\n    error ProductInsufficientLiquidityError(UFixed18 socializationFactor);\\n    error ProductDoubleSidedError();\\n    error ProductOverClosedError();\\n    error ProductInsufficientCollateralError();\\n    error ProductInLiquidationError();\\n    error ProductMakerOverLimitError();\\n    error ProductOracleBootstrappingError();\\n    error ProductNotOwnerError();\\n    error ProductInvalidOracle();\\n    error ProductClosedError();\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function initialize(ProductInfo calldata productInfo_) external;\\n    function settle() external;\\n    function settleAccount(address account) external;\\n    function openTake(UFixed18 amount) external;\\n    function closeTake(UFixed18 amount) external;\\n    function openMake(UFixed18 amount) external;\\n    function closeMake(UFixed18 amount) external;\\n    function closeAll(address account) external;\\n    function maintenance(address account) external view returns (UFixed18);\\n    function maintenanceNext(address account) external view returns (UFixed18);\\n    function isClosed(address account) external view returns (bool);\\n    function isLiquidating(address account) external view returns (bool);\\n    function position(address account) external view returns (Position memory);\\n    function pre(address account) external view returns (PrePosition memory);\\n    function latestVersion() external view returns (uint256);\\n    function positionAtVersion(uint256 oracleVersion) external view returns (Position memory);\\n    function pre() external view returns (PrePosition memory);\\n    function valueAtVersion(uint256 oracleVersion) external view returns (Accumulator memory);\\n    function shareAtVersion(uint256 oracleVersion) external view returns (Accumulator memory);\\n    function latestVersion(address account) external view returns (uint256);\\n    function rate(Position memory position) external view returns (Fixed18);\\n    function closed() external view returns (bool);\\n    function updateClosed(bool newClosed) external;\\n}\\n\",\"keccak256\":\"0xe1e80b818eadf4cdb070362e40c7cf3863b50c4f944816af27848e319f587241\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/types/Accumulator.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/Fixed18.sol\\\";\\nimport \\\"./PackedAccumulator.sol\\\";\\n\\n/// @dev Accumulator type\\nstruct Accumulator {\\n    /// @dev maker accumulator per share\\n    Fixed18 maker;\\n    /// @dev taker accumulator per share\\n    Fixed18 taker;\\n}\\nusing AccumulatorLib for Accumulator global;\\n\\n/**\\n * @title AccountAccumulatorLib\\n * @notice Library that surfaces math operations for the Accumulator type.\\n * @dev Accumulators track the cumulative change in position value over time for the maker and taker positions\\n *      respectively. Account-level accumulators can then use two of these values `a` and `a'` to compute the\\n *      change in position value since last sync. This change in value is then used to compute P&L and fees.\\n */\\nlibrary AccumulatorLib {\\n    /**\\n     * @notice Creates a packed accumulator from an accumulator\\n     * @param self an accumulator\\n     * @return New packed accumulator\\n     */\\n    function pack(Accumulator memory self) internal pure returns (PackedAccumulator memory) {\\n        return PackedAccumulator({maker: self.maker.pack(), taker: self.taker.pack()});\\n    }\\n\\n    /**\\n     * @notice Adds two accumulators together\\n     * @param a The first accumulator to sum\\n     * @param b The second accumulator to sum\\n     * @return The resulting summed accumulator\\n     */\\n    function add(Accumulator memory a, Accumulator memory b) internal pure returns (Accumulator memory) {\\n        return Accumulator({maker: a.maker.add(b.maker), taker: a.taker.add(b.taker)});\\n    }\\n\\n    /**\\n     * @notice Subtracts accumulator `b` from `a`\\n     * @param a The accumulator to subtract from\\n     * @param b The accumulator to subtract\\n     * @return The resulting subtracted accumulator\\n     */\\n    function sub(Accumulator memory a, Accumulator memory b) internal pure returns (Accumulator memory) {\\n        return Accumulator({maker: a.maker.sub(b.maker), taker: a.taker.sub(b.taker)});\\n    }\\n\\n    /**\\n     * @notice Multiplies two accumulators together\\n     * @param a The first accumulator to multiply\\n     * @param b The second accumulator to multiply\\n     * @return The resulting multiplied accumulator\\n     */\\n    function mul(Accumulator memory a, Accumulator memory b) internal pure returns (Accumulator memory) {\\n        return Accumulator({maker: a.maker.mul(b.maker), taker: a.taker.mul(b.taker)});\\n    }\\n\\n    /**\\n     * @notice Sums the maker and taker together from a single accumulator\\n     * @param self The struct to operate on\\n     * @return The sum of its maker and taker\\n     */\\n    function sum(Accumulator memory self) internal pure returns (Fixed18) {\\n        return self.maker.add(self.taker);\\n    }\\n}\\n\",\"keccak256\":\"0x7ccd0a72aa593cefb9f4337cf312799f357b82fcb3f0379de0dc503d1cb7e387\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/types/PackedAccumulator.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/PackedFixed18.sol\\\";\\nimport \\\"./Accumulator.sol\\\";\\n\\n/// @dev PackedAccumulator type\\nstruct PackedAccumulator {\\n    /// @dev maker accumulator per share\\n    PackedFixed18 maker;\\n    /// @dev taker accumulator per share\\n    PackedFixed18 taker;\\n}\\nusing PackedAccumulatorLib for PackedAccumulator global;\\n\\n/**\\n * @title PackedAccumulatorLib\\n * @dev A packed version of the Accumulator which takes up a single storage slot using `PackedFixed18` values.\\n * @notice Library for the packed Accumulator type.\\n */\\nlibrary PackedAccumulatorLib {\\n    /**\\n     * @notice Creates an accumulator from a packed accumulator\\n     * @param self packed accumulator\\n     * @return New accumulator\\n     */\\n    function unpack(PackedAccumulator memory self) internal pure returns (Accumulator memory) {\\n        return Accumulator({maker: self.maker.unpack(), taker: self.taker.unpack()});\\n    }\\n}\\n\",\"keccak256\":\"0xd83f2822d4f6c818087a232b54007730992c34ff77377fc307a282f886e7cf65\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/types/PackedPosition.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/PackedUFixed18.sol\\\";\\nimport \\\"./Position.sol\\\";\\n\\n/// @dev PackedPosition type\\nstruct PackedPosition {\\n    /// @dev Quantity of the maker position\\n    PackedUFixed18 maker;\\n    /// @dev Quantity of the taker position\\n    PackedUFixed18 taker;\\n}\\nusing PackedPositionLib for PackedPosition global;\\n\\n/**\\n * @title PackedPositionLib\\n * @dev A packed version of the Position which takes up a single storage slot using `PackedFixed18` values.\\n * @notice Library for the packed Position type.\\n */\\nlibrary PackedPositionLib {\\n    /**\\n     * @notice Creates an position from a packed position\\n     * @param self packed position\\n     * @return New position\\n     */\\n    function unpack(PackedPosition memory self) internal pure returns (Position memory) {\\n        return Position({maker: self.maker.unpack(), taker: self.taker.unpack()});\\n    }\\n}\\n\",\"keccak256\":\"0x04968e6794f6244cb3415cea111d640273a81faea957872988d0cb580f45df1e\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/types/PayoffDefinition.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../../interfaces/IContractPayoffProvider.sol\\\";\\n\\n/// @dev PayoffDefinition tyoe\\nstruct PayoffDefinition {\\n  PayoffDefinitionLib.PayoffType payoffType;\\n  PayoffDefinitionLib.PayoffDirection payoffDirection;\\n  bytes30 data;\\n}\\nusing PayoffDefinitionLib for PayoffDefinition global;\\ntype PayoffDefinitionStorage is bytes32;\\nusing PayoffDefinitionStorageLib for PayoffDefinitionStorage global;\\n\\n/**\\n * @title PayoffDefinitionLib\\n * @dev Library that surfaces logic for PayoffDefinition type functionality\\n * @notice Library for the PayoffDefinition type. Performs validity and price transformation\\n            based on the payoff definition type.\\n */\\nlibrary PayoffDefinitionLib {\\n  using Address for address;\\n\\n  error PayoffDefinitionUnsupportedTransform(PayoffType payoffType, PayoffDirection payoffDirection);\\n  error PayoffDefinitionNotContract(PayoffType payoffType, bytes30 data);\\n\\n  /// @dev Payoff function type enum\\n  enum PayoffType { PASSTHROUGH, CONTRACT }\\n  enum PayoffDirection { LONG, SHORT }\\n\\n  /**\\n   * @notice Checks validity of the payoff definition\\n   * @param self a payoff definition\\n   * @return Whether the payoff definition is valid for it's given type\\n   */\\n  function valid(PayoffDefinition memory self) internal view returns (bool) {\\n    if (self.payoffType == PayoffType.CONTRACT) return address(_providerContract(self)).isContract();\\n\\n    // All other payoff types should have no data\\n    return uint(bytes32(self.data)) == 0;\\n  }\\n\\n  /**\\n   * @notice Transforms a price based on the payoff definition\\n   * @param self a payoff definition\\n   * @param price raw oracle price\\n   * @return Price transformed by the payoff definition function\\n   */\\n  function transform(\\n    PayoffDefinition memory self,\\n    Fixed18 price\\n  ) internal view returns (Fixed18) {\\n    PayoffType payoffType = self.payoffType;\\n    PayoffDirection payoffDirection = self.payoffDirection;\\n    Fixed18 transformedPrice;\\n\\n    // First get the price depending on the type\\n    if (payoffType == PayoffType.PASSTHROUGH) transformedPrice = price;\\n    else if (payoffType == PayoffType.CONTRACT) transformedPrice =  _payoffFromContract(self, price);\\n    else revert PayoffDefinitionUnsupportedTransform(payoffType, payoffDirection);\\n\\n    // Then transform it depending on the direction flag\\n    if (self.payoffDirection == PayoffDirection.LONG) return transformedPrice;\\n    else if (self.payoffDirection == PayoffDirection.SHORT) return transformedPrice.mul(Fixed18Lib.NEG_ONE);\\n    else revert PayoffDefinitionUnsupportedTransform(payoffType, payoffDirection);\\n  }\\n\\n  /**\\n   * @notice Parses the data field into an address\\n   * @dev Reverts if payoffType is not CONTRACT\\n   * @param self a payoff definition\\n   * @return IContractPayoffProvider address\\n   */\\n  function _providerContract(\\n    PayoffDefinition memory self\\n  ) private pure returns (IContractPayoffProvider) {\\n    if (self.payoffType != PayoffType.CONTRACT) revert PayoffDefinitionNotContract(self.payoffType, self.data);\\n    // Shift to pull the last 20 bytes, then cast to an address\\n    return IContractPayoffProvider(address(bytes20(self.data << 80)));\\n  }\\n\\n  /**\\n   * @notice Performs a price transformation by calling the underlying payoff contract\\n   * @param self a payoff definition\\n   * @param price raw oracle price\\n   * @return Price transformed by the payoff definition function on the contract\\n   */\\n  function _payoffFromContract(\\n    PayoffDefinition memory self,\\n    Fixed18 price\\n  ) private view returns (Fixed18) {\\n    bytes memory ret = address(_providerContract(self)).functionStaticCall(\\n      abi.encodeCall(IContractPayoffProvider.payoff, price)\\n    );\\n    return Fixed18.wrap(abi.decode(ret, (int256)));\\n  }\\n}\\n\\n/**\\n * @title PayoffDefinitionStorageLib\\n * @notice Library that surfaces storage read and writes for the PayoffDefinition type\\n */\\nlibrary PayoffDefinitionStorageLib {\\n    function read(PayoffDefinitionStorage self) internal view returns (PayoffDefinition memory) {\\n        return _storagePointer(self);\\n    }\\n\\n    function store(PayoffDefinitionStorage self, PayoffDefinition memory value) internal {\\n        PayoffDefinition storage storagePointer = _storagePointer(self);\\n\\n        storagePointer.payoffType = value.payoffType;\\n        storagePointer.payoffDirection = value.payoffDirection;\\n        storagePointer.data = value.data;\\n    }\\n\\n    function _storagePointer(\\n      PayoffDefinitionStorage self\\n    ) private pure returns (PayoffDefinition storage pointer) {\\n        assembly { pointer.slot := self }\\n    }\\n}\\n\",\"keccak256\":\"0x4d3897f408f77381c5ae9990391465c8fd511ddf6ff3b39f6cb69d8c2bd554df\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/types/Position.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"../IProduct.sol\\\";\\nimport \\\"./Accumulator.sol\\\";\\nimport \\\"./PrePosition.sol\\\";\\nimport \\\"./PackedPosition.sol\\\";\\n\\n/// @dev Position type\\nstruct Position {\\n    /// @dev Quantity of the maker position\\n    UFixed18 maker;\\n    /// @dev Quantity of the taker position\\n    UFixed18 taker;\\n}\\nusing PositionLib for Position global;\\n\\n/**\\n * @title PositionLib\\n * @notice Library that surfaces math and settlement computations for the Position type.\\n * @dev Positions track the current quantity of the account's maker and taker positions respectively\\n *      denominated as a unit of the product's payoff function.\\n */\\nlibrary PositionLib {\\n    /**\\n     * @notice Creates a packed position from an position\\n     * @param self A position\\n     * @return New packed position\\n     */\\n    function pack(Position memory self) internal pure returns (PackedPosition memory) {\\n        return PackedPosition({maker: self.maker.pack(), taker: self.taker.pack()});\\n    }\\n\\n    /**\\n     * @notice Returns whether the position is fully empty\\n     * @param self A position\\n     * @return Whether the position is empty\\n     */\\n    function isEmpty(Position memory self) internal pure returns (bool) {\\n        return self.maker.isZero() && self.taker.isZero();\\n    }\\n\\n    /**\\n     * @notice Adds position `a` and `b` together, returning the result\\n     * @param a The first position to sum\\n     * @param b The second position to sum\\n     * @return Resulting summed position\\n     */\\n    function add(Position memory a, Position memory b) internal pure returns (Position memory) {\\n        return Position({maker: a.maker.add(b.maker), taker: a.taker.add(b.taker)});\\n    }\\n\\n    /**\\n     * @notice Subtracts position `b` from `a`, returning the result\\n     * @param a The position to subtract from\\n     * @param b The position to subtract\\n     * @return Resulting subtracted position\\n     */\\n    function sub(Position memory a, Position memory b) internal pure returns (Position memory) {\\n        return Position({maker: a.maker.sub(b.maker), taker: a.taker.sub(b.taker)});\\n    }\\n\\n    /**\\n     * @notice Multiplies position `self` by accumulator `accumulator` and returns the resulting accumulator\\n     * @param self The Position to operate on\\n     * @param accumulator The accumulator to multiply by\\n     * @return Resulting multiplied accumulator\\n     */\\n    function mul(Position memory self, Accumulator memory accumulator) internal pure returns (Accumulator memory) {\\n        return Accumulator({\\n            maker: Fixed18Lib.from(self.maker).mul(accumulator.maker),\\n            taker: Fixed18Lib.from(self.taker).mul(accumulator.taker)\\n        });\\n    }\\n\\n    /**\\n     * @notice Scales position `self` by fixed-decimal `scale` and returns the resulting position\\n     * @param self The Position to operate on\\n     * @param scale The Fixed-decimal to scale by\\n     * @return Resulting scaled position\\n     */\\n    function mul(Position memory self, UFixed18 scale) internal pure returns (Position memory) {\\n        return Position({maker: self.maker.mul(scale), taker: self.taker.mul(scale)});\\n    }\\n\\n    /**\\n     * @notice Divides position `self` by `b` and returns the resulting accumulator\\n     * @param self The Position to operate on\\n     * @param b The number to divide by\\n     * @return Resulting divided accumulator\\n     */\\n    function div(Position memory self, uint256 b) internal pure returns (Accumulator memory) {\\n        return Accumulator({\\n            maker: Fixed18Lib.from(self.maker).div(Fixed18Lib.from(UFixed18Lib.from(b))),\\n            taker: Fixed18Lib.from(self.taker).div(Fixed18Lib.from(UFixed18Lib.from(b)))\\n        });\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of `self`'s maker and taker values\\n     * @param self The struct to operate on\\n     * @return Resulting maximum value\\n     */\\n    function max(Position memory self) internal pure returns (UFixed18) {\\n        return UFixed18Lib.max(self.maker, self.taker);\\n    }\\n\\n    /**\\n     * @notice Sums the maker and taker together from a single position\\n     * @param self The struct to operate on\\n     * @return The sum of its maker and taker\\n     */\\n    function sum(Position memory self) internal pure returns (UFixed18) {\\n        return self.maker.add(self.taker);\\n    }\\n\\n    /**\\n     * @notice Computes the next position after the pending-settlement position delta is included\\n     * @param self The current Position\\n     * @param pre The pending-settlement position delta\\n     * @return Next Position\\n     */\\n    function next(Position memory self, PrePosition memory pre) internal pure returns (Position memory) {\\n        return sub(add(self, pre.openPosition), pre.closePosition);\\n    }\\n\\n    /**\\n     * @notice Returns the settled position at oracle version `toOracleVersion`\\n     * @dev Checks if a new position is ready to be settled based on the provided `toOracleVersion`\\n     *      and `pre` and returns accordingly\\n     * @param self The current Position\\n     * @param pre The pending-settlement position delta\\n     * @param toOracleVersion The oracle version to settle to\\n     * @return Settled position at oracle version\\n     * @return Fee accrued from opening or closing the position\\n     * @return Whether a new position was settled\\n     */\\n    function settled(\\n        Position memory self,\\n        PrePosition memory pre,\\n        IOracleProvider.OracleVersion memory toOracleVersion\\n    ) internal view returns (Position memory, UFixed18, bool) {\\n        return pre.canSettle(toOracleVersion) ? (next(self, pre), pre.computeFee(toOracleVersion), true) : (self, UFixed18Lib.ZERO, false);\\n    }\\n\\n    /**\\n     * @notice Returns the socialization factor for the current position\\n     * @dev Socialization account for the case where `taker` > `maker` temporarily due to a liquidation\\n     *      on the maker side. This dampens the taker's exposure pro-rata to ensure that the maker side\\n     *      is never exposed over 1 x short.\\n     * @param self The Position to operate on\\n     * @return Socialization factor\\n     */\\n    function socializationFactor(Position memory self) internal pure returns (UFixed18) {\\n        return self.taker.isZero() ? UFixed18Lib.ONE : UFixed18Lib.min(UFixed18Lib.ONE, self.maker.div(self.taker));\\n    }\\n}\\n\",\"keccak256\":\"0x027fe392c4f56bf012ba2ca462fcf23e69f2c3b9d283c14089771813437af991\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/types/PrePosition.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"@equilibria/perennial-oracle/contracts/interfaces/IOracleProvider.sol\\\";\\nimport \\\"./Position.sol\\\";\\nimport \\\"../IProduct.sol\\\";\\n\\n/// @dev PrePosition type\\nstruct PrePosition {\\n    /// @dev Oracle version at which the new position delta was recorded\\n    uint256 oracleVersion;\\n\\n    /// @dev Size of position to open at oracle version\\n    Position openPosition;\\n\\n    /// @dev Size of position to close at oracle version\\n    Position closePosition;\\n}\\nusing PrePositionLib for PrePosition global;\\n\\n/**\\n * @title PrePositionLib\\n * @notice Library that manages a pre-settlement position delta.\\n * @dev PrePositions track the currently awaiting-settlement deltas to a settled Position. These are\\n *      Primarily necessary to introduce lag into the settlement system such that oracle lag cannot be\\n *      gamed to a user's advantage. When a user opens or closes a new position, it sits as a PrePosition\\n *      for one oracle version until it's settle into the Position, making it then effective. PrePositions\\n *      are automatically settled at the correct oracle version even if a flywheel call doesn't happen until\\n *      several version into the future by using the historical version lookups in the corresponding \\\"Versioned\\\"\\n *      global state types.\\n */\\nlibrary PrePositionLib {\\n    /**\\n     * @notice Returns whether there is no pending-settlement position delta\\n     * @dev Can be \\\"empty\\\" even with a non-zero oracleVersion if a position is opened and\\n     *      closed in the same version netting out to a zero position delta\\n     * @param self The struct to operate on\\n     * @return Whether the pending-settlement position delta is empty\\n     */\\n    function isEmpty(PrePosition memory self) internal pure returns (bool) {\\n        return self.openPosition.isEmpty() && self.closePosition.isEmpty();\\n    }\\n\\n    /**\\n     * @notice Increments the maker side of the open position delta\\n     * @dev Nets out open and close deltas to minimize the size of each\\n     * @param self The struct to operate on\\n     * @param currentVersion The current oracle version index\\n     * @param amount The position amount to open\\n     */\\n    function openMake(PrePosition storage self, uint256 currentVersion, UFixed18 amount) internal {\\n        self.openPosition.maker = self.openPosition.maker.add(amount);\\n        self.oracleVersion = currentVersion;\\n        _netMake(self);\\n    }\\n\\n    /**\\n     * @notice Increments the maker side of the close position delta\\n     * @dev Nets out open and close deltas to minimize the size of each\\n     * @param self The struct to operate on\\n     * @param currentVersion The current oracle version index\\n     * @param amount The maker position amount to close\\n     */\\n    function closeMake(PrePosition storage self, uint256 currentVersion, UFixed18 amount) internal {\\n        self.closePosition.maker = self.closePosition.maker.add(amount);\\n        self.oracleVersion = currentVersion;\\n        _netMake(self);\\n    }\\n\\n    /**\\n     * @notice Increments the taker side of the open position delta\\n     * @dev Nets out open and close deltas to minimize the size of each\\n     * @param self The struct to operate on\\n     * @param currentVersion The current oracle version index\\n     * @param amount The taker position amount to open\\n     */\\n    function openTake(PrePosition storage self, uint256 currentVersion, UFixed18 amount) internal {\\n        self.openPosition.taker = self.openPosition.taker.add(amount);\\n        self.oracleVersion = currentVersion;\\n        _netTake(self);\\n    }\\n\\n    /**\\n     * @notice Increments the taker side of the close position delta\\n     * @dev Nets out open and close deltas to minimize the size of each\\n     * @param self The struct to operate on\\n     * @param currentVersion The current oracle version index\\n     * @param amount The taker position amount to close\\n     */\\n    function closeTake(PrePosition storage self, uint256 currentVersion, UFixed18 amount) internal {\\n        self.closePosition.taker = self.closePosition.taker.add(amount);\\n        self.oracleVersion = currentVersion;\\n        _netTake(self);\\n    }\\n\\n    /**\\n     * @notice Nets out the open and close on the maker side of the position delta\\n     * @param self The struct to operate on\\n     */\\n    function _netMake(PrePosition storage self) private {\\n        if (self.openPosition.maker.gt(self.closePosition.maker)) {\\n            self.openPosition.maker = self.openPosition.maker.sub(self.closePosition.maker);\\n            self.closePosition.maker = UFixed18Lib.ZERO;\\n        } else {\\n            self.closePosition.maker = self.closePosition.maker.sub(self.openPosition.maker);\\n            self.openPosition.maker = UFixed18Lib.ZERO;\\n        }\\n    }\\n\\n    /**\\n     * @notice Nets out the open and close on the taker side of the position delta\\n     * @param self The struct to operate on\\n     */\\n    function _netTake(PrePosition storage self) private {\\n        if (self.openPosition.taker.gt(self.closePosition.taker)) {\\n            self.openPosition.taker = self.openPosition.taker.sub(self.closePosition.taker);\\n            self.closePosition.taker = UFixed18Lib.ZERO;\\n        } else {\\n            self.closePosition.taker = self.closePosition.taker.sub(self.openPosition.taker);\\n            self.openPosition.taker = UFixed18Lib.ZERO;\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns whether the the pending position delta can be settled at version `toOracleVersion`\\n     * @dev Pending-settlement positions deltas can be settled (1) oracle version after they are recorded\\n     * @param self The struct to operate on\\n     * @param toOracleVersion The potential oracle version to settle\\n     * @return Whether the position delta can be settled\\n     */\\n    function canSettle(\\n        PrePosition memory self,\\n        IOracleProvider.OracleVersion memory toOracleVersion\\n    ) internal pure returns (bool) {\\n        return !isEmpty(self) && toOracleVersion.version > self.oracleVersion;\\n    }\\n\\n    /**\\n     * @notice Computes the fee incurred for opening or closing the pending-settlement position\\n     * @dev Must be called from a valid product to get the proper fee amounts\\n     * @param self The struct to operate on\\n     * @param toOracleVersion The oracle version at which settlement takes place\\n     * @return positionFee The maker / taker fee incurred\\n     */\\n    function computeFee(\\n        PrePosition memory self,\\n        IOracleProvider.OracleVersion memory toOracleVersion\\n    ) internal view returns (UFixed18) {\\n        Position memory positionDelta = self.openPosition.add(self.closePosition);\\n\\n        (UFixed18 makerNotional, UFixed18 takerNotional) = (\\n            Fixed18Lib.from(positionDelta.maker).mul(toOracleVersion.price).abs(),\\n            Fixed18Lib.from(positionDelta.taker).mul(toOracleVersion.price).abs()\\n        );\\n\\n        IProduct product = IProduct(address(this));\\n        return makerNotional.mul(product.makerFee()).add(takerNotional.mul(product.takerFee()));\\n    }\\n\\n    /**\\n     * @notice Computes the next oracle version to settle\\n     * @dev - If there is no pending-settlement position delta, returns the current oracle version\\n     *      - Otherwise returns the oracle version at which the pending-settlement position delta can be first settled\\n     *\\n     *      Corresponds to point (b) in the Position settlement flow\\n     * @param self The struct to operate on\\n     * @param currentVersion The current oracle version index\\n     * @return Next oracle version to settle\\n     */\\n    function settleVersion(PrePosition storage self, uint256 currentVersion) internal view returns (uint256) {\\n        uint256 _oracleVersion = self.oracleVersion;\\n        return _oracleVersion == 0 ? currentVersion : _oracleVersion + 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa6f83f7b5f8139ec874235c406debd086a152977493c08b7f280df6f1737fb96\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/types/ProgramInfo.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/token/types/Token18.sol\\\";\\nimport \\\"../IProduct.sol\\\";\\nimport \\\"./Position.sol\\\";\\nimport \\\"./Accumulator.sol\\\";\\n\\n/// @dev ProgramInfo type\\nstruct ProgramInfo {\\n    /// @dev Coordinator for this program\\n    uint256 coordinatorId;\\n\\n    /// @dev Amount of total maker and taker rewards\\n    Position amount;\\n\\n    /// @dev start timestamp of the program\\n    uint256 start;\\n\\n    /// @dev duration of the program (in seconds)\\n    uint256 duration;\\n\\n    /**\\n     * @dev Reward ERC20 token contract\\n     * @notice Perennial does not support non-standard ERC20s as reward tokens for incentive programs, including,\\n                but not limited to: fee on transfer and rebase tokens. Using such a non-standard token will likely\\n                result in loss of funds.\\n     */\\n    Token18 token;\\n}\\nusing ProgramInfoLib for ProgramInfo global;\\n\\n/**\\n * @title ProgramInfoLib\\n * @notice Library that snapshots the static information for a single program.\\n * @dev This information does not change during the operation of a program.\\n */\\nlibrary ProgramInfoLib {\\n    uint256 private constant MIN_DURATION = 1 days;\\n    uint256 private constant MAX_DURATION = 2 * 365 days;\\n\\n    error ProgramInvalidStartError();\\n    error ProgramInvalidDurationError();\\n\\n    /**\\n     * @notice Validates and creates a new Program\\n     * @dev Reverts for invalid programInfos\\n     * @param programInfo Un-sanitized static program information\\n     */\\n    function validate(ProgramInfo memory programInfo) internal view {\\n        if (isStarted(programInfo, block.timestamp)) revert ProgramInvalidStartError();\\n        if (programInfo.duration < MIN_DURATION || programInfo.duration > MAX_DURATION) revert ProgramInvalidDurationError();\\n    }\\n\\n    /**\\n     * @notice Computes a new program info with the fee taken out of the amount\\n     * @param programInfo Original program info\\n     * @param incentivizationFee The incentivization fee\\n     * @return New program info\\n     * @return Fee amount\\n     */\\n    function deductFee(ProgramInfo memory programInfo, UFixed18 incentivizationFee)\\n    internal pure returns (ProgramInfo memory, UFixed18) {\\n        Position memory newProgramAmount = programInfo.amount.mul(UFixed18Lib.ONE.sub(incentivizationFee));\\n        UFixed18 programFeeAmount = programInfo.amount.sub(newProgramAmount).sum();\\n        programInfo.amount = newProgramAmount;\\n        return (programInfo, programFeeAmount);\\n    }\\n\\n    /**\\n     * @notice Returns the maker and taker amounts per position share\\n     * @param self The ProgramInfo to operate on\\n     * @return programFee Amounts per share\\n     */\\n    function amountPerShare(ProgramInfo memory self) internal pure returns (Accumulator memory) {\\n        return self.amount.div(self.duration);\\n    }\\n\\n    /**\\n     * @notice Returns whether the program has started by timestamp `timestamp`\\n     * @param self The ProgramInfo to operate on\\n     * @param timestamp Timestamp to check for\\n     * @return Whether the program has started\\n     */\\n    function isStarted(ProgramInfo memory self, uint256 timestamp) internal pure returns (bool) {\\n        return timestamp >= self.start;\\n    }\\n\\n    /**\\n     * @notice Returns whether the program is completed by timestamp `timestamp`\\n     * @param self The ProgramInfo to operate on\\n     * @param timestamp Timestamp to check for\\n     * @return Whether the program is completed\\n     */\\n    function isComplete(ProgramInfo memory self, uint256 timestamp) internal pure returns (bool) {\\n        return timestamp >= (self.start + self.duration);\\n    }\\n}\\n\",\"keccak256\":\"0x280fcaf931b49abaec46b95ccbabaaf856a4b8e8d036413c9c3b3af25585d161\",\"license\":\"Apache-2.0\"},\"contracts/lens/PerennialLens.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.15;\\n\\nimport \\\"../interfaces/IPerennialLens.sol\\\";\\n\\n/**\\n * @title Lens contract to conveniently pull protocol data\\n * @notice All functions should be called using `callStatic`\\n */\\ncontract PerennialLens is IPerennialLens {\\n    /**\\n     * @notice Protocol controller\\n     * @return Protocol controller\\n     */\\n    IController public immutable controller;\\n\\n    /// @param _controller Protocol controller address\\n    constructor(IController _controller) {\\n        controller = _controller;\\n    }\\n\\n    /**\\n     * @notice Protocol collateral address\\n     * @return Protocol collateral address\\n     */\\n    function collateral() public view returns (ICollateral) {\\n        return controller.collateral();\\n    }\\n\\n    /**\\n     *  Snapshot Functions\\n     */\\n\\n    /**\\n     * @notice Returns the snapshots of the provided `productAddresses`\\n     * @param productAddresses Product addresses\\n     * @return _snapshots a snapshot for each product after settle\\n     */\\n    function snapshots(IProduct[] calldata productAddresses) public returns (ProductSnapshot[] memory _snapshots) {\\n        _snapshots = new ProductSnapshot[](productAddresses.length);\\n        for (uint256 i = 0; i < productAddresses.length; i++) {\\n            _snapshots[i] = snapshot(productAddresses[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the snapshot of the provided `product`\\n     * @param product Product address\\n     * @return _snapshot for the product after settle\\n     */\\n    function snapshot(IProduct product) public settle(product) returns (ProductSnapshot memory _snapshot) {\\n        _snapshot.productInfo = info(product);\\n        _snapshot.productAddress = address(product);\\n        _snapshot.rate = rate(product);\\n        _snapshot.dailyRate = dailyRate(product);\\n        _snapshot.latestVersion = latestVersion(product);\\n        _snapshot.maintenance = product.maintenance();\\n        _snapshot.collateral = collateral(product);\\n        _snapshot.shortfall = shortfall(product);\\n        _snapshot.pre = pre(product);\\n        _snapshot.position = position(product);\\n        (_snapshot.productFee, _snapshot.protocolFee) = fees(product);\\n        _snapshot.openInterest = openInterest(product);\\n    }\\n\\n    /**\\n     * @notice Returns the user snapshots for the provided `productAddresses`\\n     * @param account User addresses\\n     * @param productAddresses Product addresses\\n     * @return _snapshots UserSnapshot for each product after settle\\n     */\\n    function snapshots(address account, IProduct[] memory productAddresses)\\n        public returns (UserProductSnapshot[] memory _snapshots)\\n    {\\n        _snapshots = new UserProductSnapshot[](productAddresses.length);\\n        for (uint256 i = 0; i < productAddresses.length; i++) {\\n            _snapshots[i] = snapshot(account, productAddresses[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the user snapshot for the provided `product`\\n     * @param account User addresses\\n     * @param product Product address\\n     * @return _snapshot UserSnapshot for the product after settle\\n     */\\n    function snapshot(address account, IProduct product)\\n        public\\n        settleAccount(account, product)\\n        returns (UserProductSnapshot memory _snapshot)\\n    {\\n        _snapshot.productAddress = address(product);\\n        _snapshot.userAddress = account;\\n        _snapshot.collateral = collateral(account, product);\\n        _snapshot.maintenance = maintenance(account, product);\\n        _snapshot.pre = pre(account, product);\\n        _snapshot.position = position(account, product);\\n        _snapshot.liquidatable = liquidatable(account, product);\\n        _snapshot.liquidating = liquidating(account, product);\\n        _snapshot.openInterest = openInterest(account, product);\\n        _snapshot.fees = fees(account, product);\\n        _snapshot.exposure = exposure(account, product);\\n    }\\n\\n    /**\\n     *  End Snapshot Functions\\n     */\\n\\n    /**\\n     *  Product Individual Fields Functions\\n     */\\n\\n    /**\\n     * @notice Returns the name of the provided `product`\\n     * @param product Product address\\n     * @return Name of the product\\n     */\\n    function name(IProduct product) public view returns (string memory) {\\n        return product.name();\\n    }\\n\\n    /**\\n     * @notice Returns the symbol of the provided `product`\\n     * @param product Product address\\n     * @return Symbol of the product\\n     */\\n    function symbol(IProduct product) public view returns (string memory) {\\n        return product.symbol();\\n    }\\n\\n    /**\\n     * @notice Returns the info of the provided `product`\\n     * @param product Product address\\n     * @return _info of the product\\n     */\\n    function info(IProduct product) public view returns (IProduct.ProductInfo memory _info) {\\n        _info.name = name(product);\\n        _info.symbol = symbol(product);\\n        _info.payoffDefinition = product.payoffDefinition();\\n        _info.oracle = product.oracle();\\n        _info.maintenance = product.maintenance();\\n        _info.fundingFee = product.fundingFee();\\n        _info.makerFee = product.makerFee();\\n        _info.takerFee = product.takerFee();\\n        _info.makerLimit = product.makerLimit();\\n        _info.utilizationCurve = product.utilizationCurve();\\n    }\\n\\n    /**\\n     * @notice Product total collateral amount after settle\\n     * @param product Product address\\n     * @return Total collateral for product\\n     */\\n    function collateral(IProduct product) public settle(product) returns (UFixed18) {\\n        return collateral().collateral(product);\\n    }\\n\\n    /**\\n     * @notice Product total shortfall amount after settle\\n     * @param product Product address\\n     * @return Total shortfall for product\\n     */\\n    function shortfall(IProduct product) public settle(product) returns (UFixed18) {\\n        return collateral().shortfall(product);\\n    }\\n\\n    /**\\n     * @notice Product pre position after settle\\n     * @param product Product address\\n     * @return Product pre-position\\n     */\\n    function pre(IProduct product) public settle(product) returns (PrePosition memory) {\\n        return product.pre();\\n    }\\n\\n    /**\\n     * @notice Product position after settle\\n     * @param product Product address\\n     * @return product position\\n     */\\n    function position(IProduct product) public settle(product) returns (Position memory) {\\n        return _latestPosition(product);\\n    }\\n\\n    /**\\n     * @notice Product pre-position and position after settle\\n     * @param product Product address\\n     * @return Product pre-position\\n     * @return Product position\\n     */\\n    function globalPosition(IProduct product) public settle(product) returns (PrePosition memory, Position memory) {\\n        return (product.pre(), _latestPosition(product));\\n    }\\n\\n    /**\\n     * @notice Current price of product after settle\\n     * @param product Product address\\n     * @return Product latest price\\n     */\\n    function latestVersion(IProduct product) public settle(product) returns (IOracleProvider.OracleVersion memory) {\\n        return _latestVersion(product);\\n    }\\n\\n    /**\\n     * @notice Prices of product at specified versions after settle\\n     * @param product Product address\\n     * @param versions Oracle versions to query\\n     * @return prices Product prices at specified versions\\n     */\\n    function atVersions(IProduct product, uint256[] memory versions)\\n        public\\n        settle(product)\\n        returns (IOracleProvider.OracleVersion[] memory prices)\\n    {\\n        prices = new IOracleProvider.OracleVersion[](versions.length);\\n        for (uint256 i = 0; i < versions.length; i++) {\\n            prices[i] = product.atVersion(versions[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Product funding rate after settle\\n     * @param product Product address\\n     * @return Product current funding rate\\n     */\\n    function rate(IProduct product) public settle(product) returns (Fixed18) {\\n        Position memory position_ = _latestPosition(product);\\n        return product.rate(position_);\\n    }\\n\\n    /**\\n     * @notice Product funding extrapolated to a daily rate after settle\\n     * @param product Product address\\n     * @return Product current funding extrapolated to a daily rate\\n     */\\n    function dailyRate(IProduct product) public settle(product) returns (Fixed18) {\\n        Position memory position_ = _latestPosition(product);\\n        return product.rate(position_).mul(Fixed18Lib.from(60 * 60 * 24));\\n    }\\n\\n    /**\\n     * @notice Fees accumulated by product and protocol treasuries after settle\\n     * @param product Product address\\n     * @return protocolFees fees accrued by the protocol\\n     * @return productFees fees accrued by the product owner\\n     */\\n    function fees(IProduct product) public settle(product) returns (UFixed18 protocolFees, UFixed18 productFees) {\\n        address protocolTreasury = controller.treasury();\\n        address productTreasury = controller.treasury(product);\\n\\n        protocolFees = collateral().fees(protocolTreasury);\\n        productFees = collateral().fees(productTreasury);\\n    }\\n\\n    /**\\n     * @notice Product total open interest after settle\\n     * @param product Product address\\n     * @return Product maker and taker position multiplied by latest price after settle\\n     */\\n    function openInterest(IProduct product) public settle(product) returns (Position memory) {\\n        return _latestPosition(product).mul(_latestVersion(product).price.abs());\\n    }\\n\\n    /**\\n     *  End Product Individual Fields Functions\\n     */\\n\\n    /**\\n     *  UserProduct Individual Fields Functions\\n     */\\n\\n    /**\\n     * @notice User collateral amount for product after settle\\n     * @param account Account address\\n     * @param product Product address\\n     * @return User deposited collateral for product\\n     */\\n    function collateral(address account, IProduct product) public settleAccount(account, product) returns (UFixed18) {\\n        return collateral().collateral(account, product);\\n    }\\n\\n    /**\\n     * @notice User maintenance amount for product after settle\\n     * @param account Account address\\n     * @param product Product address\\n     * @return Maximum of user maintenance, and maintenanceNext\\n     */\\n    function maintenance(address account, IProduct product) public settleAccount(account, product) returns (UFixed18) {\\n        return UFixed18Lib.max(product.maintenance(account), product.maintenanceNext(account));\\n    }\\n\\n    /**\\n     * @notice User liquidatble status for product after settle\\n     * @param account Account address\\n     * @param product Product address\\n     * @return Whether or not the user's position eligible to be liquidated\\n     */\\n    function liquidatable(address account, IProduct product) public settleAccount(account, product) returns (bool) {\\n        return collateral().liquidatable(account, product);\\n    }\\n\\n    /**\\n     * @notice User liquidating status for product after settle\\n     * @param account Account address\\n     * @param product Product address\\n     * @return Whether or not the user's position is being liquidated\\n     */\\n    function liquidating(address account, IProduct product) public settleAccount(account, product) returns (bool) {\\n        return product.isLiquidating(account);\\n    }\\n\\n    /**\\n     * @notice User pre position for product after settle\\n     * @param account Account address\\n     * @param product Product address\\n     * @return User pre-position\\n     */\\n    function pre(address account, IProduct product)\\n        public\\n        settleAccount(account, product)\\n        returns (PrePosition memory)\\n    {\\n        return product.pre(account);\\n    }\\n\\n    /**\\n     * @notice User position for product after settle\\n     * @param account Account address\\n     * @param product Product address\\n     * @return User position\\n     */\\n    function position(address account, IProduct product)\\n        public\\n        settleAccount(account, product)\\n        returns (Position memory)\\n    {\\n        return product.position(account);\\n    }\\n\\n    /**\\n     * @notice User pre-position and position for product after settle\\n     * @param account Account address\\n     * @param product Product address\\n     * @return User pre-position\\n     * @return User position\\n     */\\n    function userPosition(address account, IProduct product)\\n        public\\n        settleAccount(account, product)\\n        returns (PrePosition memory, Position memory)\\n    {\\n        return (product.pre(account), product.position(account));\\n    }\\n\\n    /**\\n     * @notice Fees accumulated by account after settle\\n     * @param account Account address\\n     * @param product Product address\\n     * @return sum of all fees accrued by the account\\n     */\\n    function fees(address account, IProduct product) public settleAccount(account, product) returns (UFixed18) {\\n        return collateral().fees(account);\\n    }\\n\\n    /**\\n     * @notice User's open interest in product after settle\\n     * @param account Account address\\n     * @param product Product address\\n     * @return User's maker or taker position multiplied by latest price after settle\\n     */\\n    function openInterest(address account, IProduct product)\\n        public\\n        settleAccount(account, product)\\n        returns (Position memory)\\n    {\\n        return product.position(account).mul(_latestVersion(product).price.abs());\\n    }\\n\\n    /**\\n     * @notice User's exposure in product after settle\\n     * @param account Account address\\n     * @param product Product address\\n     * @return User's exposure (openInterest * utilization) after settle\\n     */\\n    function exposure(address account, IProduct product) public settleAccount(account, product) returns (UFixed18) {\\n        (, Position memory _pos) = globalPosition(product);\\n        if (_pos.maker.isZero()) { return UFixed18Lib.ZERO; }\\n\\n        Position memory _openInterest = openInterest(account, product);\\n        if (!_openInterest.taker.isZero()) {\\n            return _openInterest.taker; // Taker exposure is always 100% of openInterest\\n        }\\n\\n        UFixed18 utilization = _pos.taker.div(_pos.maker);\\n        return utilization.mul(_openInterest.maker); // Maker exposure is openInterest * utilization\\n    }\\n\\n    /**\\n     * @notice User's maintenance required for position size in product after settle\\n     * @param account Account address\\n     * @param product Product address\\n     * @param positionSize size of position for maintenance calculation\\n     * @return Maintenance required for position in product\\n     */\\n    function maintenanceRequired(\\n        address account,\\n        IProduct product,\\n        UFixed18 positionSize\\n    ) public settleAccount(account, product) returns (UFixed18) {\\n        UFixed18 notional = positionSize.mul(_latestVersion(product).price.abs());\\n        return notional.mul(product.maintenance());\\n    }\\n\\n    /**\\n     * @notice User's unclaimed rewards for all programs for product after settle\\n     * @param account Account address\\n     * @param product Product address\\n     * @return tokens Token addresses of unclaimed incentive rewards for given product\\n     * @return amounts Token amounts of unclaimed incentive rewards for given product\\n     */\\n    function unclaimedIncentiveRewards(address account, IProduct product)\\n        public\\n        settleAccount(account, product)\\n        returns (Token18[] memory tokens, UFixed18[] memory amounts)\\n    {\\n        IIncentivizer incentivizer = controller.incentivizer();\\n\\n        uint256 programsLength = incentivizer.count(product);\\n        tokens = new Token18[](programsLength);\\n        amounts = new UFixed18[](programsLength);\\n        for (uint256 i = 0; i < programsLength; i++) {\\n            ProgramInfo memory programInfo = incentivizer.programInfos(product, i);\\n            tokens[i] = programInfo.token;\\n            amounts[i] = incentivizer.unclaimed(product, account, i);\\n        }\\n    }\\n\\n    /**\\n     * @notice User's unclaimed rewards for provided programs for product after settle\\n     * @param account Account address\\n     * @param product Product address\\n     * @param programIds Program IDs to query\\n     * @return tokens Token addresses of unclaimed incentive rewards for given program IDs\\n     * @return amounts Token amounts of unclaimed incentive rewards for given program IDs\\n     */\\n    function unclaimedIncentiveRewards(\\n        address account,\\n        IProduct product,\\n        uint256[] calldata programIds\\n    ) public settleAccount(account, product) returns (Token18[] memory tokens, UFixed18[] memory amounts) {\\n        IIncentivizer incentivizer = controller.incentivizer();\\n        tokens = new Token18[](programIds.length);\\n        amounts = new UFixed18[](programIds.length);\\n        for (uint256 i = 0; i < programIds.length; i++) {\\n            ProgramInfo memory programInfo = incentivizer.programInfos(product, programIds[i]);\\n            tokens[i] = programInfo.token;\\n            amounts[i] = incentivizer.unclaimed(product, account, programIds[i]);\\n        }\\n    }\\n\\n    /**\\n     *  End UserProduct Individual Fields Functions\\n     */\\n\\n    /**\\n     *  Private Helper Functions\\n     */\\n\\n    /**\\n     * @notice Returns the Product's latest position\\n     * @dev Private function, does not call settle itself\\n     * @param product Product address\\n     * @return Latest position for the product\\n     */\\n    function _latestPosition(IProduct product) private view returns (Position memory) {\\n        return product.positionAtVersion(product.latestVersion());\\n    }\\n\\n    /**\\n     * @notice Returns the Product's latest version\\n     * @dev Private function, does not call settle itself\\n     * @param product Product address\\n     * @return Latest version for the product\\n     */\\n    function _latestVersion(IProduct product) private view returns (IOracleProvider.OracleVersion memory) {\\n        return product.atVersion(product.latestVersion());\\n    }\\n\\n    /**\\n     *  End Private Helper Functions\\n     */\\n\\n    /**\\n     *  Modifier Functions\\n     */\\n\\n    /// @dev Settles the product\\n    modifier settle(IProduct product) {\\n        product.settle();\\n        _;\\n    }\\n\\n    /// @dev Settles the product. product.settleAccount also settles the product\\n    modifier settleAccount(address account, IProduct product) {\\n        product.settleAccount(account);\\n        _;\\n    }\\n\\n    /**\\n     *  End Modifier Functions\\n     */\\n}\\n\",\"keccak256\":\"0x5478ea94c64a9760090faecaffbe6cba8bf531a00d2baefd8ed08e7f78593389\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200479938038062004799833981016040819052620000349162000046565b6001600160a01b031660805262000078565b6000602082840312156200005957600080fd5b81516001600160a01b03811681146200007157600080fd5b9392505050565b6080516146e2620000b76000396000818161052e015281816117d60152818161268b01528181612a3b01528181612dca0152612ea201526146e26000f3fe608060405234801561001057600080fd5b506004361061020b5760003560e01c80638f5edc081161012a578063b7a98f97116100bd578063edd8ca7b1161008c578063f77c479111610071578063f77c479114610529578063f8083f5614610550578063faaebd211461056357600080fd5b8063edd8ca7b14610503578063f5c06e1b1461051657600080fd5b8063b7a98f971461049d578063cc218ece146104b0578063d8dfeb45146104c3578063e9c6b4c1146104f057600080fd5b8063a5fdc5de116100f9578063a5fdc5de14610444578063a86e357614610457578063b4d6f7811461046a578063b7648fb91461047d57600080fd5b80638f5edc08146103de5780639b9ac2cb146103fe5780639bc02857146104115780639be2a5671461043157600080fd5b806337e710ac116101a25780637e64cc13116101715780637e64cc131461036757806382df39de146103885780638e076924146103ab5780638e480b20146103be57600080fd5b806337e710ac1461030e578063540027e6146103215780636878353e146103345780636efef0851461034757600080fd5b80631e0c6fb9116101de5780631e0c6fb91461029b578063204e94b0146102bb578063237e5899146102db57806326512160146102ee57600080fd5b80630198489214610210578063036790c0146102395780630aae7a6b1461025a5780630ba9d8ca1461027a575b600080fd5b61022361021e36600461363e565b61058b565b60405161023091906136d5565b60405180910390f35b61024c61024736600461363e565b610624565b6040516102309291906136e8565b61026d61026836600461363e565b610723565b60405161023091906138af565b61028d61028836600461363e565b610b37565b604051908152602001610230565b6102ae6102a936600461363e565b610c43565b60405161023091906138c2565b6102ce6102c93660046138f8565b610d22565b6040516102309190613a2e565b61028d6102e93660046138f8565b610e67565b6103016102fc36600461363e565b610f6f565b6040516102309190613b6e565b61028d61031c3660046138f8565b611104565b61028d61032f36600461363e565b6112bf565b61024c6103423660046138f8565b6113d7565b61035a610355366004613c4c565b6115a2565b6040516102309190613cf7565b61037a6103753660046138f8565b611748565b604051610230929190613d59565b61039b6103963660046138f8565b611b2e565b6040519015158152602001610230565b61028d6103b9366004613dea565b611c5a565b6103d16103cc36600461363e565b611d8a565b6040516102309190613e2b565b6103f16103ec366004613e4c565b611e18565b6040516102309190613eec565b61028d61040c3660046138f8565b611ed6565b61042461041f366004613f7b565b611ffa565b6040516102309190613fbd565b6102ae61043f3660046138f8565b6120b6565b61028d61045236600461363e565b6121d3565b61022361046536600461363e565b6122d1565b61028d61047836600461363e565b61231e565b61049061048b36600461363e565b6123df565b604051610230919061403d565b6104906104ab3660046138f8565b61245d565b61028d6104be3660046138f8565b612598565b6104cb612687565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610230565b6104906104fe3660046138f8565b61271d565b61049061051136600461363e565b612843565b61039b6105243660046138f8565b6128d0565b6104cb7f000000000000000000000000000000000000000000000000000000000000000081565b61037a61055e366004614054565b6129ad565b61057661057136600461363e565b612d62565b60408051928352602083019190915201610230565b60608173ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa1580156105d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261061e91908101906140b9565b92915050565b61062c613357565b6040805180820190915260008082526020820152828073ffffffffffffffffffffffffffffffffffffffff166311da60b46040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561068957600080fd5b505af115801561069d573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff166359ea287d6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156106ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071091906141ba565b6107198561304f565b9250925050915091565b61072b6133ad565b6107348261058b565b815261073f826122d1565b81602001819052508173ffffffffffffffffffffffffffffffffffffffff166305d5c1cb6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b6919061422e565b81604001819052508173ffffffffffffffffffffffffffffffffffffffff16637dc0d1d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082d919061429b565b816060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff16636c376cc56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d391906142b8565b8160800181815250508173ffffffffffffffffffffffffffffffffffffffff16635d16e1206040518163ffffffff1660e01b8152600401602060405180830381865afa158015610927573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094b91906142b8565b8160a00181815250508173ffffffffffffffffffffffffffffffffffffffff1663fc741c7c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561099f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c391906142b8565b8160c00181815250508173ffffffffffffffffffffffffffffffffffffffff166343f0179b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3b91906142b8565b8160e00181815250508173ffffffffffffffffffffffffffffffffffffffff1663193775676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab391906142b8565b816101000181815250508173ffffffffffffffffffffffffffffffffffffffff1663a12e1b336040518163ffffffff1660e01b8152600401608060405180830381865afa158015610b08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2c91906142e8565b610120820152919050565b6000818073ffffffffffffffffffffffffffffffffffffffff166311da60b46040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610b8257600080fd5b505af1158015610b96573d6000803e3d6000fd5b505050506000610ba58461304f565b6040517f60ec91d600000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff8516906360ec91d690610bfa90849060040161403d565b602060405180830381865afa158015610c17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3b91906142b8565b949350505050565b610c4b613357565b818073ffffffffffffffffffffffffffffffffffffffff166311da60b46040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c9457600080fd5b505af1158015610ca8573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166359ea287d6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610cf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1b91906141ba565b9392505050565b610d2a613477565b6040517ff667f89700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80851660048301528491849182169063f667f89790602401600060405180830381600087803b158015610d9757600080fd5b505af1158015610dab573d6000803e3d6000fd5b50505073ffffffffffffffffffffffffffffffffffffffff80861685528616602085015250610dda8585612598565b6040840152610de98585611104565b6060840152610df885856120b6565b6080840152610e07858561271d565b60a0840152610e168585611b2e565b151560c0840152610e2785856128d0565b151560e0840152610e38858561245d565b610100840152610e488585611ed6565b610120840152610e588585610e67565b61014084015250909392505050565b6040517ff667f89700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152600091849184919082169063f667f89790602401600060405180830381600087803b158015610ed857600080fd5b505af1158015610eec573d6000803e3d6000fd5b505050506000610efb85610624565b805190925015905015610f12576000935050610f67565b6000610f1e878761245d565b9050610f2c81602001511590565b610f3d57602001519350610f679050565b81516020830151600091610f51919061314c565b8251909150610f6190829061316b565b95505050505b505092915050565b610f7761353d565b818073ffffffffffffffffffffffffffffffffffffffff166311da60b46040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610fc057600080fd5b505af1158015610fd4573d6000803e3d6000fd5b50505050610fe183610723565b825273ffffffffffffffffffffffffffffffffffffffff8316602083015261100883610b37565b6040830152611016836112bf565b606083015261102483611d8a565b82608001819052508273ffffffffffffffffffffffffffffffffffffffff16636c376cc56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611077573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109b91906142b8565b60a08301526110a9836121d3565b60c08301526110b78361231e565b60e08301526110c583610c43565b6101008301526110d4836123df565b6101208301526110e383612d62565b6101608401526101408301526110f883612843565b61018083015250919050565b6040517ff667f89700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152600091849184919082169063f667f89790602401600060405180830381600087803b15801561117557600080fd5b505af1158015611189573d6000803e3d6000fd5b50506040517f9168902400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301526112b6935087169150639168902490602401602060405180830381865afa1580156111fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122191906142b8565b6040517fab582f2900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015287169063ab582f2990602401602060405180830381865afa15801561128d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b191906142b8565b613180565b95945050505050565b6000818073ffffffffffffffffffffffffffffffffffffffff166311da60b46040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561130a57600080fd5b505af115801561131e573d6000803e3d6000fd5b50505050600061132d8461304f565b9050610c3b61133e6201518061318c565b6040517f60ec91d600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8716906360ec91d69061139090869060040161403d565b602060405180830381865afa1580156113ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d191906142b8565b906131a0565b6113df613357565b6040805180820182526000808252602082015290517ff667f89700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301528591859182169063f667f89790602401600060405180830381600087803b15801561145e57600080fd5b505af1158015611472573d6000803e3d6000fd5b50506040517f1e0c6fb900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff898116600483015288169250631e0c6fb9915060240160a060405180830381865afa1580156114e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150691906141ba565b6040517fb7648fb900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015287169063b7648fb9906024016040805180830381865afa158015611571573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611595919061437c565b9350935050509250929050565b6060828073ffffffffffffffffffffffffffffffffffffffff166311da60b46040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156115ed57600080fd5b505af1158015611601573d6000803e3d6000fd5b50505050825167ffffffffffffffff81111561161f5761161f613b81565b60405190808252806020026020018201604052801561167457816020015b61166160405180606001604052806000815260200160008152602001600081525090565b81526020019060019003908161163d5790505b50915060005b8351811015610f67578473ffffffffffffffffffffffffffffffffffffffff16637ece075d8583815181106116b1576116b1614398565b60200260200101516040518263ffffffff1660e01b81526004016116d791815260200190565b606060405180830381865afa1580156116f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171891906143c7565b83828151811061172a5761172a614398565b6020026020010181905250808061174090614432565b91505061167a565b6040517ff667f89700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808416600483015260609182918591859182169063f667f89790602401600060405180830381600087803b1580156117ba57600080fd5b505af11580156117ce573d6000803e3d6000fd5b5050505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636fc6407c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561183f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611863919061429b565b6040517f05d85eda00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301529192506000918316906305d85eda90602401602060405180830381865afa1580156118d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f991906142b8565b90508067ffffffffffffffff81111561191457611914613b81565b60405190808252806020026020018201604052801561193d578160200160208202803683370190505b5095508067ffffffffffffffff81111561195957611959613b81565b604051908082528060200260200182016040528015611982578160200160208202803683370190505b50945060005b81811015611b22576040517f2c3e50e500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89811660048301526024820183905260009190851690632c3e50e59060440160c060405180830381865afa158015611a07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2b919061446a565b90508060800151888381518110611a4457611a44614398565b73ffffffffffffffffffffffffffffffffffffffff92831660209182029290920101526040517f66f8162e0000000000000000000000000000000000000000000000000000000081528a821660048201528b8216602482015260448101849052908516906366f8162e90606401602060405180830381865afa158015611ace573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af291906142b8565b878381518110611b0457611b04614398565b60209081029190910101525080611b1a81614432565b915050611988565b50505050509250929050565b6040517ff667f89700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152600091849184919082169063f667f89790602401600060405180830381600087803b158015611b9f57600080fd5b505af1158015611bb3573d6000803e3d6000fd5b50505050611bbf612687565b6040517f82df39de00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152868116602483015291909116906382df39de906044015b602060405180830381865afa158015611c36573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b691906144e6565b6040517ff667f89700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8085166004830152600091859185919082169063f667f89790602401600060405180830381600087803b158015611ccb57600080fd5b505af1158015611cdf573d6000803e3d6000fd5b505050506000611d04611cfd611cf4886131bf565b604001516132cd565b869061316b565b9050611d7f8673ffffffffffffffffffffffffffffffffffffffff16636c376cc56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7891906142b8565b829061316b565b979650505050505050565b611dae60405180606001604052806000815260200160008152602001600081525090565b818073ffffffffffffffffffffffffffffffffffffffff166311da60b46040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611df757600080fd5b505af1158015611e0b573d6000803e3d6000fd5b50505050610d1b836131bf565b6060815167ffffffffffffffff811115611e3457611e34613b81565b604051908082528060200260200182016040528015611e6d57816020015b611e5a613477565b815260200190600190039081611e525790505b50905060005b8251811015611ecf57611e9f84848381518110611e9257611e92614398565b6020026020010151610d22565b828281518110611eb157611eb1614398565b60200260200101819052508080611ec790614432565b915050611e73565b5092915050565b6040517ff667f89700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152600091849184919082169063f667f89790602401600060405180830381600087803b158015611f4757600080fd5b505af1158015611f5b573d6000803e3d6000fd5b50505050611f67612687565b6040517ffaaebd2100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152919091169063faaebd21906024015b602060405180830381865afa158015611fd6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b691906142b8565b60608167ffffffffffffffff81111561201557612015613b81565b60405190808252806020026020018201604052801561204e57816020015b61203b61353d565b8152602001906001900390816120335790505b50905060005b82811015611ecf5761208684848381811061207157612071614398565b90506020020160208101906102fc919061363e565b82828151811061209857612098614398565b602002602001018190525080806120ae90614432565b915050612054565b6120be613357565b6040517ff667f89700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80851660048301528491849182169063f667f89790602401600060405180830381600087803b15801561212b57600080fd5b505af115801561213f573d6000803e3d6000fd5b50506040517f1e0c6fb900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015287169250631e0c6fb9915060240160a060405180830381865afa1580156121af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b691906141ba565b6000818073ffffffffffffffffffffffffffffffffffffffff166311da60b46040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561221e57600080fd5b505af1158015612232573d6000803e3d6000fd5b5050505061223e612687565b6040517fa5fdc5de00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152919091169063a5fdc5de906024015b602060405180830381865afa1580156122ad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1b91906142b8565b60608173ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156105d8573d6000803e3d6000fd5b6000818073ffffffffffffffffffffffffffffffffffffffff166311da60b46040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561236957600080fd5b505af115801561237d573d6000803e3d6000fd5b50505050612389612687565b6040517fb4d6f78100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152919091169063b4d6f78190602401612290565b6040805180820190915260008082526020820152818073ffffffffffffffffffffffffffffffffffffffff166311da60b46040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561243c57600080fd5b505af1158015612450573d6000803e3d6000fd5b50505050610d1b8361304f565b6040805180820182526000808252602082015290517ff667f89700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301528491849182169063f667f89790602401600060405180830381600087803b1580156124dc57600080fd5b505af11580156124f0573d6000803e3d6000fd5b505050506112b6612503611cf4866131bf565b6040517fb7648fb900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015287169063b7648fb9906024016040805180830381865afa15801561256e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612592919061437c565b906132d8565b6040517ff667f89700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152600091849184919082169063f667f89790602401600060405180830381600087803b15801561260957600080fd5b505af115801561261d573d6000803e3d6000fd5b50505050612629612687565b6040517fcc218ece00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301528681166024830152919091169063cc218ece90604401611fb9565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612718919061429b565b905090565b6040805180820182526000808252602082015290517ff667f89700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301528491849182169063f667f89790602401600060405180830381600087803b15801561279c57600080fd5b505af11580156127b0573d6000803e3d6000fd5b50506040517fb7648fb900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301528716925063b7648fb991506024016040805180830381865afa15801561281f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b6919061437c565b6040805180820190915260008082526020820152818073ffffffffffffffffffffffffffffffffffffffff166311da60b46040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156128a057600080fd5b505af11580156128b4573d6000803e3d6000fd5b50505050610d1b6128c7611cf4856131bf565b6125928561304f565b6040517ff667f89700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152600091849184919082169063f667f89790602401600060405180830381600087803b15801561294157600080fd5b505af1158015612955573d6000803e3d6000fd5b50506040517f58ca6f9800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152871692506358ca6f989150602401611c19565b6040517ff667f89700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808616600483015260609182918791879182169063f667f89790602401600060405180830381600087803b158015612a1f57600080fd5b505af1158015612a33573d6000803e3d6000fd5b5050505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636fc6407c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612aa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac8919061429b565b90508567ffffffffffffffff811115612ae357612ae3613b81565b604051908082528060200260200182016040528015612b0c578160200160208202803683370190505b5094508567ffffffffffffffff811115612b2857612b28613b81565b604051908082528060200260200182016040528015612b51578160200160208202803683370190505b50935060005b86811015612d555760008273ffffffffffffffffffffffffffffffffffffffff16632c3e50e58b8b8b86818110612b9057612b90614398565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff9094166004850152602002919091013560248301525060440160c060405180830381865afa158015612c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c2b919061446a565b90508060800151878381518110612c4457612c44614398565b73ffffffffffffffffffffffffffffffffffffffff928316602091820292909201015283166366f8162e8b8d8c8c87818110612c8257612c82614398565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff958616600482015294909316602485015250602090910201356044820152606401602060405180830381865afa158015612d01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2591906142b8565b868381518110612d3757612d37614398565b60209081029190910101525080612d4d81614432565b915050612b57565b5050505094509492505050565b600080828073ffffffffffffffffffffffffffffffffffffffff166311da60b46040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612dae57600080fd5b505af1158015612dc2573d6000803e3d6000fd5b5050505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166361d027b36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e57919061429b565b6040517f2d809cb600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301529192506000917f00000000000000000000000000000000000000000000000000000000000000001690632d809cb690602401602060405180830381865afa158015612ee9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f0d919061429b565b9050612f17612687565b6040517ffaaebd2100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152919091169063faaebd2190602401602060405180830381865afa158015612f85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fa991906142b8565b9450612fb3612687565b6040517ffaaebd2100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152919091169063faaebd2190602401602060405180830381865afa158015613021573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061304591906142b8565b9350505050915091565b60408051808201909152600080825260208201528173ffffffffffffffffffffffffffffffffffffffff16639a427d038373ffffffffffffffffffffffffffffffffffffffff1663c07f47d46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156130ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ee91906142b8565b6040518263ffffffff1660e01b815260040161310c91815260200190565b6040805180830381865afa158015613128573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061e919061437c565b600081613161670de0b6b3a764000085614508565b610d1b9190614574565b6000670de0b6b3a76400006131618385614508565b6000610d1b8383613329565b600061061e670de0b6b3a764000083614588565b6000670de0b6b3a76400006131b58385614588565b610d1b9190614644565b6131e360405180606001604052806000815260200160008152602001600081525090565b8173ffffffffffffffffffffffffffffffffffffffff16637ece075d8373ffffffffffffffffffffffffffffffffffffffff1663c07f47d46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561324a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061326e91906142b8565b6040518263ffffffff1660e01b815260040161328c91815260200190565b606060405180830381865afa1580156132a9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061e91906143c7565b600061061e82613340565b60408051808201909152600080825260208201526040805180820190915283518190613304908561316b565b815260200161332084866020015161316b90919063ffffffff16565b90529392505050565b6000818310156133395781610d1b565b5090919050565b600080821215613353578160000361061e565b5090565b604051806060016040528060008152602001613386604051806040016040528060008152602001600081525090565b81526020016133a8604051806040016040528060008152602001600081525090565b905290565b60405180610140016040528060608152602001606081526020016133ec6040805160608101909152806000815260200160008152600060209091015290565b8152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016133a860405180608001604052806000600f0b81526020016000600f0b81526020016000600f0b815260200160006fffffffffffffffffffffffffffffffff1681525090565b604051806101600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016134d3613357565b81526020016134f5604051806040016040528060008152602001600081525090565b8152602001600015158152602001600015158152602001613529604051806040016040528060008152602001600081525090565b815260200160008152602001600081525090565b604051806101a001604052806135516133ad565b8152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016135a560405180606001604052806000815260200160008152602001600081525090565b81526020016000815260200160008152602001600081526020016135c7613357565b81526020016135e9604051806040016040528060008152602001600081525090565b815260200160008152602001600081526020016133a8604051806040016040528060008152602001600081525090565b73ffffffffffffffffffffffffffffffffffffffff8116811461363b57600080fd5b50565b60006020828403121561365057600080fd5b8135610d1b81613619565b60005b8381101561367657818101518382015260200161365e565b83811115613685576000848401525b50505050565b600081518084526136a381602086016020860161365b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610d1b602083018461368b565b82518152602080840151805182840152810151604080840191909152840151805160608401520151608082015260e08101825160a0830152602083015160c0830152610d1b565b6002811061363b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b80516137718161372f565b825260208101516137818161372f565b60208301526040908101517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016910152565b60006101e082518185526137c98286018261368b565b915050602083015184820360208601526137e3828261368b565b91505060408301516137f86040860182613766565b50606083015173ffffffffffffffffffffffffffffffffffffffff811660a086015250608083015160c085015260a083015160e085015260c0830151610100818187015260e0850151915061012082818801528186015161014088015280860151925050506138a76101608601828051600f0b82526020810151600f0b60208301526040810151600f0b60408301526fffffffffffffffffffffffffffffffff60608201511660608301525050565b509392505050565b602081526000610d1b60208301846137b3565b81518152602080830151805182840152810151604080840191909152830151805160608401520151608082015260a0810161061e565b6000806040838503121561390b57600080fd5b823561391681613619565b9150602083013561392681613619565b809150509250929050565b805173ffffffffffffffffffffffffffffffffffffffff1682526020810151613972602084018273ffffffffffffffffffffffffffffffffffffffff169052565b50604081015160408301526060810151606083015260808101516139c560808401828051825260208082015180518285015290810151604084015250604001518051606083015260200151608090910152565b5060a08101516101206139e48185018380518252602090810151910152565b60c0830151151561016085015260e0830151151561018085015261010083015180516101a0860152602001516101c08501528201516101e084015250610140015161020090910152565b610220810161061e8284613931565b60006102a08251818552613a53828601826137b3565b9150506020830151613a7d602086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060408301516040850152606083015160608501526080830151613ab860808601828051825260208082015190830152604090810151910152565b5060a083015160e085015260c0830151610100818187015260e0850151915061012082818801528186015192506101409150613b22828801848051825260208082015180518285015290810151604084015250604001518051606083015260200151608090910152565b85015180516101e08801526020810151610200880152915084015161022086015250610160830151610240850152610180830151805161026086015260208101516102808601526138a7565b602081526000610d1b6020830184613a3d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715613bd357613bd3613b81565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613c2057613c20613b81565b604052919050565b600067ffffffffffffffff821115613c4257613c42613b81565b5060051b60200190565b60008060408385031215613c5f57600080fd5b8235613c6a81613619565b915060208381013567ffffffffffffffff811115613c8757600080fd5b8401601f81018613613c9857600080fd5b8035613cab613ca682613c28565b613bd9565b81815260059190911b82018301908381019088831115613cca57600080fd5b928401925b82841015613ce857833582529284019290840190613ccf565b80955050505050509250929050565b6020808252825182820181905260009190848201906040850190845b81811015613d4d57613d3a8385518051825260208082015190830152604090810151910152565b9284019260609290920191600101613d13565b50909695505050505050565b604080825283519082018190526000906020906060840190828701845b82811015613da857815173ffffffffffffffffffffffffffffffffffffffff1684529284019290840190600101613d76565b5050508381038285015284518082528583019183019060005b81811015613ddd57835183529284019291840191600101613dc1565b5090979650505050505050565b600080600060608486031215613dff57600080fd5b8335613e0a81613619565b92506020840135613e1a81613619565b929592945050506040919091013590565b8151815260208083015190820152604080830151908201526060810161061e565b60008060408385031215613e5f57600080fd5b8235613e6a81613619565b915060208381013567ffffffffffffffff811115613e8757600080fd5b8401601f81018613613e9857600080fd5b8035613ea6613ca682613c28565b81815260059190911b82018301908381019088831115613ec557600080fd5b928401925b82841015613ce8578335613edd81613619565b82529284019290840190613eca565b6020808252825182820181905260009190848201906040850190845b81811015613d4d57613f1b838551613931565b928401926102209290920191600101613f08565b60008083601f840112613f4157600080fd5b50813567ffffffffffffffff811115613f5957600080fd5b6020830191508360208260051b8501011115613f7457600080fd5b9250929050565b60008060208385031215613f8e57600080fd5b823567ffffffffffffffff811115613fa557600080fd5b613fb185828601613f2f565b90969095509350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614030577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845261401e858351613a3d565b94509285019290850190600101613fe4565b5092979650505050505050565b81518152602080830151908201526040810161061e565b6000806000806060858703121561406a57600080fd5b843561407581613619565b9350602085013561408581613619565b9250604085013567ffffffffffffffff8111156140a157600080fd5b6140ad87828801613f2f565b95989497509550505050565b6000602082840312156140cb57600080fd5b815167ffffffffffffffff808211156140e357600080fd5b818401915084601f8301126140f757600080fd5b81518181111561410957614109613b81565b61413a60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613bd9565b915080825285602082850101111561415157600080fd5b61416281602084016020860161365b565b50949350505050565b60006040828403121561417d57600080fd5b6040516040810181811067ffffffffffffffff821117156141a0576141a0613b81565b604052825181526020928301519281019290925250919050565b600060a082840312156141cc57600080fd5b6040516060810181811067ffffffffffffffff821117156141ef576141ef613b81565b60405282518152614203846020850161416b565b6020820152614215846060850161416b565b60408201529392505050565b6002811061363b57600080fd5b60006060828403121561424057600080fd5b614248613bb0565b825161425381614221565b8152602083015161426381614221565b602082015260408301517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00008116811461421557600080fd5b6000602082840312156142ad57600080fd5b8151610d1b81613619565b6000602082840312156142ca57600080fd5b5051919050565b8051600f81900b81146142e357600080fd5b919050565b6000608082840312156142fa57600080fd5b6040516080810181811067ffffffffffffffff8211171561431d5761431d613b81565b604052614329836142d1565b8152614337602084016142d1565b6020820152614348604084016142d1565b604082015260608301516fffffffffffffffffffffffffffffffff8116811461437057600080fd5b60608201529392505050565b60006040828403121561438e57600080fd5b610d1b838361416b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000606082840312156143d957600080fd5b6143e1613bb0565b8251815260208301516020820152604083015160408201528091505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361446357614463614403565b5060010190565b600060c0828403121561447c57600080fd5b60405160a0810181811067ffffffffffffffff8211171561449f5761449f613b81565b604052825181526144b3846020850161416b565b6020820152606083015160408201526080830151606082015260a08301516144da81613619565b60808201529392505050565b6000602082840312156144f857600080fd5b81518015158114610d1b57600080fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561454057614540614403565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261458357614583614545565b500490565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000841360008413858304851182821616156145c9576145c9614403565b7f8000000000000000000000000000000000000000000000000000000000000000600087128682058812818416161561460457614604614403565b6000871292508782058712848416161561462057614620614403565b8785058712818416161561463657614636614403565b505050929093029392505050565b60008261465357614653614545565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f8000000000000000000000000000000000000000000000000000000000000000831416156146a7576146a7614403565b50059056fea26469706673582212206db77c0d984546687817814f74442aaf51c5a60c503137ad38573cdbc56fa1f664736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061020b5760003560e01c80638f5edc081161012a578063b7a98f97116100bd578063edd8ca7b1161008c578063f77c479111610071578063f77c479114610529578063f8083f5614610550578063faaebd211461056357600080fd5b8063edd8ca7b14610503578063f5c06e1b1461051657600080fd5b8063b7a98f971461049d578063cc218ece146104b0578063d8dfeb45146104c3578063e9c6b4c1146104f057600080fd5b8063a5fdc5de116100f9578063a5fdc5de14610444578063a86e357614610457578063b4d6f7811461046a578063b7648fb91461047d57600080fd5b80638f5edc08146103de5780639b9ac2cb146103fe5780639bc02857146104115780639be2a5671461043157600080fd5b806337e710ac116101a25780637e64cc13116101715780637e64cc131461036757806382df39de146103885780638e076924146103ab5780638e480b20146103be57600080fd5b806337e710ac1461030e578063540027e6146103215780636878353e146103345780636efef0851461034757600080fd5b80631e0c6fb9116101de5780631e0c6fb91461029b578063204e94b0146102bb578063237e5899146102db57806326512160146102ee57600080fd5b80630198489214610210578063036790c0146102395780630aae7a6b1461025a5780630ba9d8ca1461027a575b600080fd5b61022361021e36600461363e565b61058b565b60405161023091906136d5565b60405180910390f35b61024c61024736600461363e565b610624565b6040516102309291906136e8565b61026d61026836600461363e565b610723565b60405161023091906138af565b61028d61028836600461363e565b610b37565b604051908152602001610230565b6102ae6102a936600461363e565b610c43565b60405161023091906138c2565b6102ce6102c93660046138f8565b610d22565b6040516102309190613a2e565b61028d6102e93660046138f8565b610e67565b6103016102fc36600461363e565b610f6f565b6040516102309190613b6e565b61028d61031c3660046138f8565b611104565b61028d61032f36600461363e565b6112bf565b61024c6103423660046138f8565b6113d7565b61035a610355366004613c4c565b6115a2565b6040516102309190613cf7565b61037a6103753660046138f8565b611748565b604051610230929190613d59565b61039b6103963660046138f8565b611b2e565b6040519015158152602001610230565b61028d6103b9366004613dea565b611c5a565b6103d16103cc36600461363e565b611d8a565b6040516102309190613e2b565b6103f16103ec366004613e4c565b611e18565b6040516102309190613eec565b61028d61040c3660046138f8565b611ed6565b61042461041f366004613f7b565b611ffa565b6040516102309190613fbd565b6102ae61043f3660046138f8565b6120b6565b61028d61045236600461363e565b6121d3565b61022361046536600461363e565b6122d1565b61028d61047836600461363e565b61231e565b61049061048b36600461363e565b6123df565b604051610230919061403d565b6104906104ab3660046138f8565b61245d565b61028d6104be3660046138f8565b612598565b6104cb612687565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610230565b6104906104fe3660046138f8565b61271d565b61049061051136600461363e565b612843565b61039b6105243660046138f8565b6128d0565b6104cb7f000000000000000000000000000000000000000000000000000000000000000081565b61037a61055e366004614054565b6129ad565b61057661057136600461363e565b612d62565b60408051928352602083019190915201610230565b60608173ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa1580156105d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261061e91908101906140b9565b92915050565b61062c613357565b6040805180820190915260008082526020820152828073ffffffffffffffffffffffffffffffffffffffff166311da60b46040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561068957600080fd5b505af115801561069d573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff166359ea287d6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156106ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071091906141ba565b6107198561304f565b9250925050915091565b61072b6133ad565b6107348261058b565b815261073f826122d1565b81602001819052508173ffffffffffffffffffffffffffffffffffffffff166305d5c1cb6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b6919061422e565b81604001819052508173ffffffffffffffffffffffffffffffffffffffff16637dc0d1d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082d919061429b565b816060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff16636c376cc56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d391906142b8565b8160800181815250508173ffffffffffffffffffffffffffffffffffffffff16635d16e1206040518163ffffffff1660e01b8152600401602060405180830381865afa158015610927573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094b91906142b8565b8160a00181815250508173ffffffffffffffffffffffffffffffffffffffff1663fc741c7c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561099f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c391906142b8565b8160c00181815250508173ffffffffffffffffffffffffffffffffffffffff166343f0179b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3b91906142b8565b8160e00181815250508173ffffffffffffffffffffffffffffffffffffffff1663193775676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab391906142b8565b816101000181815250508173ffffffffffffffffffffffffffffffffffffffff1663a12e1b336040518163ffffffff1660e01b8152600401608060405180830381865afa158015610b08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2c91906142e8565b610120820152919050565b6000818073ffffffffffffffffffffffffffffffffffffffff166311da60b46040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610b8257600080fd5b505af1158015610b96573d6000803e3d6000fd5b505050506000610ba58461304f565b6040517f60ec91d600000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff8516906360ec91d690610bfa90849060040161403d565b602060405180830381865afa158015610c17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3b91906142b8565b949350505050565b610c4b613357565b818073ffffffffffffffffffffffffffffffffffffffff166311da60b46040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c9457600080fd5b505af1158015610ca8573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166359ea287d6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610cf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1b91906141ba565b9392505050565b610d2a613477565b6040517ff667f89700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80851660048301528491849182169063f667f89790602401600060405180830381600087803b158015610d9757600080fd5b505af1158015610dab573d6000803e3d6000fd5b50505073ffffffffffffffffffffffffffffffffffffffff80861685528616602085015250610dda8585612598565b6040840152610de98585611104565b6060840152610df885856120b6565b6080840152610e07858561271d565b60a0840152610e168585611b2e565b151560c0840152610e2785856128d0565b151560e0840152610e38858561245d565b610100840152610e488585611ed6565b610120840152610e588585610e67565b61014084015250909392505050565b6040517ff667f89700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152600091849184919082169063f667f89790602401600060405180830381600087803b158015610ed857600080fd5b505af1158015610eec573d6000803e3d6000fd5b505050506000610efb85610624565b805190925015905015610f12576000935050610f67565b6000610f1e878761245d565b9050610f2c81602001511590565b610f3d57602001519350610f679050565b81516020830151600091610f51919061314c565b8251909150610f6190829061316b565b95505050505b505092915050565b610f7761353d565b818073ffffffffffffffffffffffffffffffffffffffff166311da60b46040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610fc057600080fd5b505af1158015610fd4573d6000803e3d6000fd5b50505050610fe183610723565b825273ffffffffffffffffffffffffffffffffffffffff8316602083015261100883610b37565b6040830152611016836112bf565b606083015261102483611d8a565b82608001819052508273ffffffffffffffffffffffffffffffffffffffff16636c376cc56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611077573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109b91906142b8565b60a08301526110a9836121d3565b60c08301526110b78361231e565b60e08301526110c583610c43565b6101008301526110d4836123df565b6101208301526110e383612d62565b6101608401526101408301526110f883612843565b61018083015250919050565b6040517ff667f89700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152600091849184919082169063f667f89790602401600060405180830381600087803b15801561117557600080fd5b505af1158015611189573d6000803e3d6000fd5b50506040517f9168902400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301526112b6935087169150639168902490602401602060405180830381865afa1580156111fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122191906142b8565b6040517fab582f2900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015287169063ab582f2990602401602060405180830381865afa15801561128d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b191906142b8565b613180565b95945050505050565b6000818073ffffffffffffffffffffffffffffffffffffffff166311da60b46040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561130a57600080fd5b505af115801561131e573d6000803e3d6000fd5b50505050600061132d8461304f565b9050610c3b61133e6201518061318c565b6040517f60ec91d600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8716906360ec91d69061139090869060040161403d565b602060405180830381865afa1580156113ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d191906142b8565b906131a0565b6113df613357565b6040805180820182526000808252602082015290517ff667f89700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301528591859182169063f667f89790602401600060405180830381600087803b15801561145e57600080fd5b505af1158015611472573d6000803e3d6000fd5b50506040517f1e0c6fb900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff898116600483015288169250631e0c6fb9915060240160a060405180830381865afa1580156114e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150691906141ba565b6040517fb7648fb900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015287169063b7648fb9906024016040805180830381865afa158015611571573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611595919061437c565b9350935050509250929050565b6060828073ffffffffffffffffffffffffffffffffffffffff166311da60b46040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156115ed57600080fd5b505af1158015611601573d6000803e3d6000fd5b50505050825167ffffffffffffffff81111561161f5761161f613b81565b60405190808252806020026020018201604052801561167457816020015b61166160405180606001604052806000815260200160008152602001600081525090565b81526020019060019003908161163d5790505b50915060005b8351811015610f67578473ffffffffffffffffffffffffffffffffffffffff16637ece075d8583815181106116b1576116b1614398565b60200260200101516040518263ffffffff1660e01b81526004016116d791815260200190565b606060405180830381865afa1580156116f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171891906143c7565b83828151811061172a5761172a614398565b6020026020010181905250808061174090614432565b91505061167a565b6040517ff667f89700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808416600483015260609182918591859182169063f667f89790602401600060405180830381600087803b1580156117ba57600080fd5b505af11580156117ce573d6000803e3d6000fd5b5050505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636fc6407c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561183f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611863919061429b565b6040517f05d85eda00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301529192506000918316906305d85eda90602401602060405180830381865afa1580156118d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f991906142b8565b90508067ffffffffffffffff81111561191457611914613b81565b60405190808252806020026020018201604052801561193d578160200160208202803683370190505b5095508067ffffffffffffffff81111561195957611959613b81565b604051908082528060200260200182016040528015611982578160200160208202803683370190505b50945060005b81811015611b22576040517f2c3e50e500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89811660048301526024820183905260009190851690632c3e50e59060440160c060405180830381865afa158015611a07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2b919061446a565b90508060800151888381518110611a4457611a44614398565b73ffffffffffffffffffffffffffffffffffffffff92831660209182029290920101526040517f66f8162e0000000000000000000000000000000000000000000000000000000081528a821660048201528b8216602482015260448101849052908516906366f8162e90606401602060405180830381865afa158015611ace573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af291906142b8565b878381518110611b0457611b04614398565b60209081029190910101525080611b1a81614432565b915050611988565b50505050509250929050565b6040517ff667f89700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152600091849184919082169063f667f89790602401600060405180830381600087803b158015611b9f57600080fd5b505af1158015611bb3573d6000803e3d6000fd5b50505050611bbf612687565b6040517f82df39de00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152868116602483015291909116906382df39de906044015b602060405180830381865afa158015611c36573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b691906144e6565b6040517ff667f89700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8085166004830152600091859185919082169063f667f89790602401600060405180830381600087803b158015611ccb57600080fd5b505af1158015611cdf573d6000803e3d6000fd5b505050506000611d04611cfd611cf4886131bf565b604001516132cd565b869061316b565b9050611d7f8673ffffffffffffffffffffffffffffffffffffffff16636c376cc56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7891906142b8565b829061316b565b979650505050505050565b611dae60405180606001604052806000815260200160008152602001600081525090565b818073ffffffffffffffffffffffffffffffffffffffff166311da60b46040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611df757600080fd5b505af1158015611e0b573d6000803e3d6000fd5b50505050610d1b836131bf565b6060815167ffffffffffffffff811115611e3457611e34613b81565b604051908082528060200260200182016040528015611e6d57816020015b611e5a613477565b815260200190600190039081611e525790505b50905060005b8251811015611ecf57611e9f84848381518110611e9257611e92614398565b6020026020010151610d22565b828281518110611eb157611eb1614398565b60200260200101819052508080611ec790614432565b915050611e73565b5092915050565b6040517ff667f89700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152600091849184919082169063f667f89790602401600060405180830381600087803b158015611f4757600080fd5b505af1158015611f5b573d6000803e3d6000fd5b50505050611f67612687565b6040517ffaaebd2100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152919091169063faaebd21906024015b602060405180830381865afa158015611fd6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b691906142b8565b60608167ffffffffffffffff81111561201557612015613b81565b60405190808252806020026020018201604052801561204e57816020015b61203b61353d565b8152602001906001900390816120335790505b50905060005b82811015611ecf5761208684848381811061207157612071614398565b90506020020160208101906102fc919061363e565b82828151811061209857612098614398565b602002602001018190525080806120ae90614432565b915050612054565b6120be613357565b6040517ff667f89700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80851660048301528491849182169063f667f89790602401600060405180830381600087803b15801561212b57600080fd5b505af115801561213f573d6000803e3d6000fd5b50506040517f1e0c6fb900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015287169250631e0c6fb9915060240160a060405180830381865afa1580156121af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b691906141ba565b6000818073ffffffffffffffffffffffffffffffffffffffff166311da60b46040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561221e57600080fd5b505af1158015612232573d6000803e3d6000fd5b5050505061223e612687565b6040517fa5fdc5de00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152919091169063a5fdc5de906024015b602060405180830381865afa1580156122ad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1b91906142b8565b60608173ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156105d8573d6000803e3d6000fd5b6000818073ffffffffffffffffffffffffffffffffffffffff166311da60b46040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561236957600080fd5b505af115801561237d573d6000803e3d6000fd5b50505050612389612687565b6040517fb4d6f78100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152919091169063b4d6f78190602401612290565b6040805180820190915260008082526020820152818073ffffffffffffffffffffffffffffffffffffffff166311da60b46040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561243c57600080fd5b505af1158015612450573d6000803e3d6000fd5b50505050610d1b8361304f565b6040805180820182526000808252602082015290517ff667f89700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301528491849182169063f667f89790602401600060405180830381600087803b1580156124dc57600080fd5b505af11580156124f0573d6000803e3d6000fd5b505050506112b6612503611cf4866131bf565b6040517fb7648fb900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015287169063b7648fb9906024016040805180830381865afa15801561256e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612592919061437c565b906132d8565b6040517ff667f89700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152600091849184919082169063f667f89790602401600060405180830381600087803b15801561260957600080fd5b505af115801561261d573d6000803e3d6000fd5b50505050612629612687565b6040517fcc218ece00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301528681166024830152919091169063cc218ece90604401611fb9565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612718919061429b565b905090565b6040805180820182526000808252602082015290517ff667f89700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301528491849182169063f667f89790602401600060405180830381600087803b15801561279c57600080fd5b505af11580156127b0573d6000803e3d6000fd5b50506040517fb7648fb900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301528716925063b7648fb991506024016040805180830381865afa15801561281f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b6919061437c565b6040805180820190915260008082526020820152818073ffffffffffffffffffffffffffffffffffffffff166311da60b46040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156128a057600080fd5b505af11580156128b4573d6000803e3d6000fd5b50505050610d1b6128c7611cf4856131bf565b6125928561304f565b6040517ff667f89700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152600091849184919082169063f667f89790602401600060405180830381600087803b15801561294157600080fd5b505af1158015612955573d6000803e3d6000fd5b50506040517f58ca6f9800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152871692506358ca6f989150602401611c19565b6040517ff667f89700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808616600483015260609182918791879182169063f667f89790602401600060405180830381600087803b158015612a1f57600080fd5b505af1158015612a33573d6000803e3d6000fd5b5050505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636fc6407c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612aa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac8919061429b565b90508567ffffffffffffffff811115612ae357612ae3613b81565b604051908082528060200260200182016040528015612b0c578160200160208202803683370190505b5094508567ffffffffffffffff811115612b2857612b28613b81565b604051908082528060200260200182016040528015612b51578160200160208202803683370190505b50935060005b86811015612d555760008273ffffffffffffffffffffffffffffffffffffffff16632c3e50e58b8b8b86818110612b9057612b90614398565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff9094166004850152602002919091013560248301525060440160c060405180830381865afa158015612c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c2b919061446a565b90508060800151878381518110612c4457612c44614398565b73ffffffffffffffffffffffffffffffffffffffff928316602091820292909201015283166366f8162e8b8d8c8c87818110612c8257612c82614398565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff958616600482015294909316602485015250602090910201356044820152606401602060405180830381865afa158015612d01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2591906142b8565b868381518110612d3757612d37614398565b60209081029190910101525080612d4d81614432565b915050612b57565b5050505094509492505050565b600080828073ffffffffffffffffffffffffffffffffffffffff166311da60b46040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612dae57600080fd5b505af1158015612dc2573d6000803e3d6000fd5b5050505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166361d027b36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e57919061429b565b6040517f2d809cb600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301529192506000917f00000000000000000000000000000000000000000000000000000000000000001690632d809cb690602401602060405180830381865afa158015612ee9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f0d919061429b565b9050612f17612687565b6040517ffaaebd2100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152919091169063faaebd2190602401602060405180830381865afa158015612f85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fa991906142b8565b9450612fb3612687565b6040517ffaaebd2100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152919091169063faaebd2190602401602060405180830381865afa158015613021573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061304591906142b8565b9350505050915091565b60408051808201909152600080825260208201528173ffffffffffffffffffffffffffffffffffffffff16639a427d038373ffffffffffffffffffffffffffffffffffffffff1663c07f47d46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156130ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ee91906142b8565b6040518263ffffffff1660e01b815260040161310c91815260200190565b6040805180830381865afa158015613128573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061e919061437c565b600081613161670de0b6b3a764000085614508565b610d1b9190614574565b6000670de0b6b3a76400006131618385614508565b6000610d1b8383613329565b600061061e670de0b6b3a764000083614588565b6000670de0b6b3a76400006131b58385614588565b610d1b9190614644565b6131e360405180606001604052806000815260200160008152602001600081525090565b8173ffffffffffffffffffffffffffffffffffffffff16637ece075d8373ffffffffffffffffffffffffffffffffffffffff1663c07f47d46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561324a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061326e91906142b8565b6040518263ffffffff1660e01b815260040161328c91815260200190565b606060405180830381865afa1580156132a9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061e91906143c7565b600061061e82613340565b60408051808201909152600080825260208201526040805180820190915283518190613304908561316b565b815260200161332084866020015161316b90919063ffffffff16565b90529392505050565b6000818310156133395781610d1b565b5090919050565b600080821215613353578160000361061e565b5090565b604051806060016040528060008152602001613386604051806040016040528060008152602001600081525090565b81526020016133a8604051806040016040528060008152602001600081525090565b905290565b60405180610140016040528060608152602001606081526020016133ec6040805160608101909152806000815260200160008152600060209091015290565b8152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016133a860405180608001604052806000600f0b81526020016000600f0b81526020016000600f0b815260200160006fffffffffffffffffffffffffffffffff1681525090565b604051806101600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016134d3613357565b81526020016134f5604051806040016040528060008152602001600081525090565b8152602001600015158152602001600015158152602001613529604051806040016040528060008152602001600081525090565b815260200160008152602001600081525090565b604051806101a001604052806135516133ad565b8152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016135a560405180606001604052806000815260200160008152602001600081525090565b81526020016000815260200160008152602001600081526020016135c7613357565b81526020016135e9604051806040016040528060008152602001600081525090565b815260200160008152602001600081526020016133a8604051806040016040528060008152602001600081525090565b73ffffffffffffffffffffffffffffffffffffffff8116811461363b57600080fd5b50565b60006020828403121561365057600080fd5b8135610d1b81613619565b60005b8381101561367657818101518382015260200161365e565b83811115613685576000848401525b50505050565b600081518084526136a381602086016020860161365b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610d1b602083018461368b565b82518152602080840151805182840152810151604080840191909152840151805160608401520151608082015260e08101825160a0830152602083015160c0830152610d1b565b6002811061363b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b80516137718161372f565b825260208101516137818161372f565b60208301526040908101517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016910152565b60006101e082518185526137c98286018261368b565b915050602083015184820360208601526137e3828261368b565b91505060408301516137f86040860182613766565b50606083015173ffffffffffffffffffffffffffffffffffffffff811660a086015250608083015160c085015260a083015160e085015260c0830151610100818187015260e0850151915061012082818801528186015161014088015280860151925050506138a76101608601828051600f0b82526020810151600f0b60208301526040810151600f0b60408301526fffffffffffffffffffffffffffffffff60608201511660608301525050565b509392505050565b602081526000610d1b60208301846137b3565b81518152602080830151805182840152810151604080840191909152830151805160608401520151608082015260a0810161061e565b6000806040838503121561390b57600080fd5b823561391681613619565b9150602083013561392681613619565b809150509250929050565b805173ffffffffffffffffffffffffffffffffffffffff1682526020810151613972602084018273ffffffffffffffffffffffffffffffffffffffff169052565b50604081015160408301526060810151606083015260808101516139c560808401828051825260208082015180518285015290810151604084015250604001518051606083015260200151608090910152565b5060a08101516101206139e48185018380518252602090810151910152565b60c0830151151561016085015260e0830151151561018085015261010083015180516101a0860152602001516101c08501528201516101e084015250610140015161020090910152565b610220810161061e8284613931565b60006102a08251818552613a53828601826137b3565b9150506020830151613a7d602086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060408301516040850152606083015160608501526080830151613ab860808601828051825260208082015190830152604090810151910152565b5060a083015160e085015260c0830151610100818187015260e0850151915061012082818801528186015192506101409150613b22828801848051825260208082015180518285015290810151604084015250604001518051606083015260200151608090910152565b85015180516101e08801526020810151610200880152915084015161022086015250610160830151610240850152610180830151805161026086015260208101516102808601526138a7565b602081526000610d1b6020830184613a3d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715613bd357613bd3613b81565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613c2057613c20613b81565b604052919050565b600067ffffffffffffffff821115613c4257613c42613b81565b5060051b60200190565b60008060408385031215613c5f57600080fd5b8235613c6a81613619565b915060208381013567ffffffffffffffff811115613c8757600080fd5b8401601f81018613613c9857600080fd5b8035613cab613ca682613c28565b613bd9565b81815260059190911b82018301908381019088831115613cca57600080fd5b928401925b82841015613ce857833582529284019290840190613ccf565b80955050505050509250929050565b6020808252825182820181905260009190848201906040850190845b81811015613d4d57613d3a8385518051825260208082015190830152604090810151910152565b9284019260609290920191600101613d13565b50909695505050505050565b604080825283519082018190526000906020906060840190828701845b82811015613da857815173ffffffffffffffffffffffffffffffffffffffff1684529284019290840190600101613d76565b5050508381038285015284518082528583019183019060005b81811015613ddd57835183529284019291840191600101613dc1565b5090979650505050505050565b600080600060608486031215613dff57600080fd5b8335613e0a81613619565b92506020840135613e1a81613619565b929592945050506040919091013590565b8151815260208083015190820152604080830151908201526060810161061e565b60008060408385031215613e5f57600080fd5b8235613e6a81613619565b915060208381013567ffffffffffffffff811115613e8757600080fd5b8401601f81018613613e9857600080fd5b8035613ea6613ca682613c28565b81815260059190911b82018301908381019088831115613ec557600080fd5b928401925b82841015613ce8578335613edd81613619565b82529284019290840190613eca565b6020808252825182820181905260009190848201906040850190845b81811015613d4d57613f1b838551613931565b928401926102209290920191600101613f08565b60008083601f840112613f4157600080fd5b50813567ffffffffffffffff811115613f5957600080fd5b6020830191508360208260051b8501011115613f7457600080fd5b9250929050565b60008060208385031215613f8e57600080fd5b823567ffffffffffffffff811115613fa557600080fd5b613fb185828601613f2f565b90969095509350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614030577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845261401e858351613a3d565b94509285019290850190600101613fe4565b5092979650505050505050565b81518152602080830151908201526040810161061e565b6000806000806060858703121561406a57600080fd5b843561407581613619565b9350602085013561408581613619565b9250604085013567ffffffffffffffff8111156140a157600080fd5b6140ad87828801613f2f565b95989497509550505050565b6000602082840312156140cb57600080fd5b815167ffffffffffffffff808211156140e357600080fd5b818401915084601f8301126140f757600080fd5b81518181111561410957614109613b81565b61413a60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613bd9565b915080825285602082850101111561415157600080fd5b61416281602084016020860161365b565b50949350505050565b60006040828403121561417d57600080fd5b6040516040810181811067ffffffffffffffff821117156141a0576141a0613b81565b604052825181526020928301519281019290925250919050565b600060a082840312156141cc57600080fd5b6040516060810181811067ffffffffffffffff821117156141ef576141ef613b81565b60405282518152614203846020850161416b565b6020820152614215846060850161416b565b60408201529392505050565b6002811061363b57600080fd5b60006060828403121561424057600080fd5b614248613bb0565b825161425381614221565b8152602083015161426381614221565b602082015260408301517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00008116811461421557600080fd5b6000602082840312156142ad57600080fd5b8151610d1b81613619565b6000602082840312156142ca57600080fd5b5051919050565b8051600f81900b81146142e357600080fd5b919050565b6000608082840312156142fa57600080fd5b6040516080810181811067ffffffffffffffff8211171561431d5761431d613b81565b604052614329836142d1565b8152614337602084016142d1565b6020820152614348604084016142d1565b604082015260608301516fffffffffffffffffffffffffffffffff8116811461437057600080fd5b60608201529392505050565b60006040828403121561438e57600080fd5b610d1b838361416b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000606082840312156143d957600080fd5b6143e1613bb0565b8251815260208301516020820152604083015160408201528091505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361446357614463614403565b5060010190565b600060c0828403121561447c57600080fd5b60405160a0810181811067ffffffffffffffff8211171561449f5761449f613b81565b604052825181526144b3846020850161416b565b6020820152606083015160408201526080830151606082015260a08301516144da81613619565b60808201529392505050565b6000602082840312156144f857600080fd5b81518015158114610d1b57600080fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561454057614540614403565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261458357614583614545565b500490565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000841360008413858304851182821616156145c9576145c9614403565b7f8000000000000000000000000000000000000000000000000000000000000000600087128682058812818416161561460457614604614403565b6000871292508782058712848416161561462057614620614403565b8785058712818416161561463657614636614403565b505050929093029392505050565b60008261465357614653614545565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f8000000000000000000000000000000000000000000000000000000000000000831416156146a7576146a7614403565b50059056fea26469706673582212206db77c0d984546687817814f74442aaf51c5a60c503137ad38573cdbc56fa1f664736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "atVersions(address,uint256[])": {
        "params": {
          "product": "Product address",
          "versions": "Oracle versions to query"
        },
        "returns": {
          "prices": "Product prices at specified versions"
        }
      },
      "collateral()": {
        "returns": {
          "_0": "Protocol collateral address"
        }
      },
      "collateral(address)": {
        "params": {
          "product": "Product address"
        },
        "returns": {
          "_0": "Total collateral for product"
        }
      },
      "collateral(address,address)": {
        "params": {
          "account": "Account address",
          "product": "Product address"
        },
        "returns": {
          "_0": "User deposited collateral for product"
        }
      },
      "constructor": {
        "params": {
          "_controller": "Protocol controller address"
        }
      },
      "dailyRate(address)": {
        "params": {
          "product": "Product address"
        },
        "returns": {
          "_0": "Product current funding extrapolated to a daily rate"
        }
      },
      "exposure(address,address)": {
        "params": {
          "account": "Account address",
          "product": "Product address"
        },
        "returns": {
          "_0": "User's exposure (openInterest * utilization) after settle"
        }
      },
      "fees(address)": {
        "params": {
          "product": "Product address"
        },
        "returns": {
          "productFees": "fees accrued by the product owner",
          "protocolFees": "fees accrued by the protocol"
        }
      },
      "fees(address,address)": {
        "params": {
          "account": "Account address",
          "product": "Product address"
        },
        "returns": {
          "_0": "sum of all fees accrued by the account"
        }
      },
      "globalPosition(address)": {
        "params": {
          "product": "Product address"
        },
        "returns": {
          "_0": "Product pre-position",
          "_1": "Product position"
        }
      },
      "info(address)": {
        "params": {
          "product": "Product address"
        },
        "returns": {
          "_info": "of the product"
        }
      },
      "latestVersion(address)": {
        "params": {
          "product": "Product address"
        },
        "returns": {
          "_0": "Product latest price"
        }
      },
      "liquidatable(address,address)": {
        "params": {
          "account": "Account address",
          "product": "Product address"
        },
        "returns": {
          "_0": "Whether or not the user's position eligible to be liquidated"
        }
      },
      "liquidating(address,address)": {
        "params": {
          "account": "Account address",
          "product": "Product address"
        },
        "returns": {
          "_0": "Whether or not the user's position is being liquidated"
        }
      },
      "maintenance(address,address)": {
        "params": {
          "account": "Account address",
          "product": "Product address"
        },
        "returns": {
          "_0": "Maximum of user maintenance, and maintenanceNext"
        }
      },
      "maintenanceRequired(address,address,uint256)": {
        "params": {
          "account": "Account address",
          "positionSize": "size of position for maintenance calculation",
          "product": "Product address"
        },
        "returns": {
          "_0": "Maintenance required for position in product"
        }
      },
      "name(address)": {
        "params": {
          "product": "Product address"
        },
        "returns": {
          "_0": "Name of the product"
        }
      },
      "openInterest(address)": {
        "params": {
          "product": "Product address"
        },
        "returns": {
          "_0": "Product maker and taker position multiplied by latest price after settle"
        }
      },
      "openInterest(address,address)": {
        "params": {
          "account": "Account address",
          "product": "Product address"
        },
        "returns": {
          "_0": "User's maker or taker position multiplied by latest price after settle"
        }
      },
      "position(address)": {
        "params": {
          "product": "Product address"
        },
        "returns": {
          "_0": "product position"
        }
      },
      "position(address,address)": {
        "params": {
          "account": "Account address",
          "product": "Product address"
        },
        "returns": {
          "_0": "User position"
        }
      },
      "pre(address)": {
        "params": {
          "product": "Product address"
        },
        "returns": {
          "_0": "Product pre-position"
        }
      },
      "pre(address,address)": {
        "params": {
          "account": "Account address",
          "product": "Product address"
        },
        "returns": {
          "_0": "User pre-position"
        }
      },
      "rate(address)": {
        "params": {
          "product": "Product address"
        },
        "returns": {
          "_0": "Product current funding rate"
        }
      },
      "shortfall(address)": {
        "params": {
          "product": "Product address"
        },
        "returns": {
          "_0": "Total shortfall for product"
        }
      },
      "snapshot(address)": {
        "params": {
          "product": "Product address"
        },
        "returns": {
          "_snapshot": "for the product after settle"
        }
      },
      "snapshot(address,address)": {
        "params": {
          "account": "User addresses",
          "product": "Product address"
        },
        "returns": {
          "_snapshot": "UserSnapshot for the product after settle"
        }
      },
      "snapshots(address,address[])": {
        "params": {
          "account": "User addresses",
          "productAddresses": "Product addresses"
        },
        "returns": {
          "_snapshots": "UserSnapshot for each product after settle"
        }
      },
      "snapshots(address[])": {
        "params": {
          "productAddresses": "Product addresses"
        },
        "returns": {
          "_snapshots": "a snapshot for each product after settle"
        }
      },
      "symbol(address)": {
        "params": {
          "product": "Product address"
        },
        "returns": {
          "_0": "Symbol of the product"
        }
      },
      "unclaimedIncentiveRewards(address,address)": {
        "params": {
          "account": "Account address",
          "product": "Product address"
        },
        "returns": {
          "amounts": "Token amounts of unclaimed incentive rewards for given product",
          "tokens": "Token addresses of unclaimed incentive rewards for given product"
        }
      },
      "unclaimedIncentiveRewards(address,address,uint256[])": {
        "params": {
          "account": "Account address",
          "product": "Product address",
          "programIds": "Program IDs to query"
        },
        "returns": {
          "amounts": "Token amounts of unclaimed incentive rewards for given program IDs",
          "tokens": "Token addresses of unclaimed incentive rewards for given program IDs"
        }
      },
      "userPosition(address,address)": {
        "params": {
          "account": "Account address",
          "product": "Product address"
        },
        "returns": {
          "_0": "User pre-position",
          "_1": "User position"
        }
      }
    },
    "stateVariables": {
      "controller": {
        "return": "Protocol controller",
        "returns": {
          "_0": "Protocol controller"
        }
      }
    },
    "title": "Lens contract to conveniently pull protocol data",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "atVersions(address,uint256[])": {
        "notice": "Prices of product at specified versions after settle"
      },
      "collateral()": {
        "notice": "Protocol collateral address"
      },
      "collateral(address)": {
        "notice": "Product total collateral amount after settle"
      },
      "collateral(address,address)": {
        "notice": "User collateral amount for product after settle"
      },
      "controller()": {
        "notice": "Protocol controller"
      },
      "dailyRate(address)": {
        "notice": "Product funding extrapolated to a daily rate after settle"
      },
      "exposure(address,address)": {
        "notice": "User's exposure in product after settle"
      },
      "fees(address)": {
        "notice": "Fees accumulated by product and protocol treasuries after settle"
      },
      "fees(address,address)": {
        "notice": "Fees accumulated by account after settle"
      },
      "globalPosition(address)": {
        "notice": "Product pre-position and position after settle"
      },
      "info(address)": {
        "notice": "Returns the info of the provided `product`"
      },
      "latestVersion(address)": {
        "notice": "Current price of product after settle"
      },
      "liquidatable(address,address)": {
        "notice": "User liquidatble status for product after settle"
      },
      "liquidating(address,address)": {
        "notice": "User liquidating status for product after settle"
      },
      "maintenance(address,address)": {
        "notice": "User maintenance amount for product after settle"
      },
      "maintenanceRequired(address,address,uint256)": {
        "notice": "User's maintenance required for position size in product after settle"
      },
      "name(address)": {
        "notice": "Returns the name of the provided `product`"
      },
      "openInterest(address)": {
        "notice": "Product total open interest after settle"
      },
      "openInterest(address,address)": {
        "notice": "User's open interest in product after settle"
      },
      "position(address)": {
        "notice": "Product position after settle"
      },
      "position(address,address)": {
        "notice": "User position for product after settle"
      },
      "pre(address)": {
        "notice": "Product pre position after settle"
      },
      "pre(address,address)": {
        "notice": "User pre position for product after settle"
      },
      "rate(address)": {
        "notice": "Product funding rate after settle"
      },
      "shortfall(address)": {
        "notice": "Product total shortfall amount after settle"
      },
      "snapshot(address)": {
        "notice": "Returns the snapshot of the provided `product`"
      },
      "snapshot(address,address)": {
        "notice": "Returns the user snapshot for the provided `product`"
      },
      "snapshots(address,address[])": {
        "notice": "Returns the user snapshots for the provided `productAddresses`"
      },
      "snapshots(address[])": {
        "notice": "Returns the snapshots of the provided `productAddresses`"
      },
      "symbol(address)": {
        "notice": "Returns the symbol of the provided `product`"
      },
      "unclaimedIncentiveRewards(address,address)": {
        "notice": "User's unclaimed rewards for all programs for product after settle"
      },
      "unclaimedIncentiveRewards(address,address,uint256[])": {
        "notice": "User's unclaimed rewards for provided programs for product after settle"
      },
      "userPosition(address,address)": {
        "notice": "User pre-position and position for product after settle"
      }
    },
    "notice": "All functions should be called using `callStatic`",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
