import { expect, util } from 'chai'
import { utils, constants } from 'ethers'
import HRE from 'hardhat'
import { impersonateWithBalance } from '../../../../common/testutil/impersonate'
import { expectPositionEq } from '../../../../common/testutil/types'
import { Collateral__factory, IERC20Metadata__factory, Product } from '../../../types/generated'
import { setupTokenHolders } from '../../integration/helpers/setupHelpers'
import { Deployment } from 'hardhat-deploy/types'
import { SignerWithAddress } from '@nomiclabs/hardhat-ethers/signers'
import { time } from '../../../../common/testutil'

const { ethers, config } = HRE

const ETH_AGGREGATOR_TRANSMITTER = '0xddeb598fe902a13cc523aaff5240e9988edce170'
const ETH_AGGREGATOR_ADDRESS = '0x37bc7498f4ff12c19678ee8fe19d713b87f6a9e6'
const POSITION = utils.parseEther('0.01')

export default async function opensPositions(
  product: Product,
  signer: SignerWithAddress,
  deployments: { [name: string]: Deployment },
): Promise<void> {
  await time.reset(config)

  const transmitterSigner = await impersonateWithBalance(ETH_AGGREGATOR_TRANSMITTER, utils.parseEther('10'))

  const collateral = Collateral__factory.connect(deployments['Collateral_Proxy'].address, signer)
  const dsu = IERC20Metadata__factory.connect(deployments['DSU'].address, signer)

  const [, userA, userB] = await ethers.getSigners()
  const { dsuHolder } = await setupTokenHolders(dsu, [])

  await dsu.connect(dsuHolder).approve(collateral.address, constants.MaxUint256)
  await collateral.connect(dsuHolder).depositTo(userA.address, product.address, utils.parseEther('1000'))
  await collateral.connect(dsuHolder).depositTo(userB.address, product.address, utils.parseEther('1000'))

  await expect(product.connect(userA).openMake(POSITION)).to.not.be.reverted
  await expect(product.connect(userB).openTake(POSITION)).to.not.be.reverted

  const pre = await product['pre()']()
  expectPositionEq(pre.openPosition, { maker: POSITION, taker: POSITION })
  expectPositionEq(pre.closePosition, { maker: 0, taker: 0 })

  const latestVersion = await product['latestVersion()']()
  const latestPosition = await product.positionAtVersion(latestVersion)
  // Push a new price version to the aggregator
  await transmitterSigner.sendTransaction({
    to: ETH_AGGREGATOR_ADDRESS,
    value: 0,
    data: '0xc9807539000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000680000100000100010000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004600000000000000000000000d02ee3e7b93bbe024d583e46d7fe544500000817050700150b12111906040a0905031b0d1c1e140e0f1d10170c0802160118131a000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000001f0000000000000000000000000000000000000000000000000000001d75898b800000000000000000000000000000000000000000000000000000001d75898b800000000000000000000000000000000000000000000000000000001d75ecba200000000000000000000000000000000000000000000000000000001d760912cd0000000000000000000000000000000000000000000000000000001d762e31e50000000000000000000000000000000000000000000000000000001d7640a6800000000000000000000000000000000000000000000000000000001d764af3380000000000000000000000000000000000000000000000000000001d76553ff00000000000000000000000000000000000000000000000000000001d76553ff00000000000000000000000000000000000000000000000000000001d76553ff00000000000000000000000000000000000000000000000000000001d76553ff00000000000000000000000000000000000000000000000000000001d765f2b000000000000000000000000000000000000000000000000000000001d765f2b000000000000000000000000000000000000000000000000000000001d765f2b000000000000000000000000000000000000000000000000000000001d765f2b000000000000000000000000000000000000000000000000000000001d765f2b000000000000000000000000000000000000000000000000000000001d765f2b000000000000000000000000000000000000000000000000000000001d7660b1a00000000000000000000000000000000000000000000000000000001d766e6d400000000000000000000000000000000000000000000000000000001d7689bf650000000000000000000000000000000000000000000000000000001d7689bf650000000000000000000000000000000000000000000000000000001d76ad37a60000000000000000000000000000000000000000000000000000001d76b453cb0000000000000000000000000000000000000000000000000000001d76b453cb0000000000000000000000000000000000000000000000000000001d776291400000000000000000000000000000000000000000000000000000001d776291400000000000000000000000000000000000000000000000000000001d783c90850000000000000000000000000000000000000000000000000000001d783c90850000000000000000000000000000000000000000000000000000001d783c90850000000000000000000000000000000000000000000000000000001d78a300800000000000000000000000000000000000000000000000000000001d79f9c611000000000000000000000000000000000000000000000000000000000000000bc452833519fd8d426531f90b332bc4f22e1b7c512074d193c595e2b6a8c06bcaead299094d09a825f3008d6614cbd764c8eb85be68ade459a30a554e8a628435fcb576edbfb050fe21cfb3c76b8378d73accf4eeee097f65b6eefdccc3750842edca60c387b373349c5cb163592b3aa50183452508b68bb577fabd839a7abe1d378a832efece0b93d763b8c869dd4a287766b6a817588a8238ab6a59d116e8fbc23b4b4590e995929b1043cb8bb33809fa77df8e61ecd6cbb7fa585d769d4c9c29cc646cf9d61509fa3e8e8d6b0ef0cb8ded0ae4510e86814af6fa6a8a841510aa67f6a49cfbb431a1dcafcdd05ebe8fb55feb096a1a6fd5a10d9819e6516641dff9e1f82adce35a8b8b8fc1cb7d33da55358898b05591a7c292cd262fb64781bd34ef8779b233938fdfb678045ffc8ecb8280e88d90d4acc9e7cc47d6f157472272c6eeb94d82382bef501ea0b78732efd101b73c393ef8cce443772c71776b000000000000000000000000000000000000000000000000000000000000000b60791527e1ff381617eeb1b548b8fb70b3faa0a2ee1db77cc5a8fe4a14f07d8c45e29bf74757123d5d3bf8bed6ebd94d088ed6a28bf8fce719de664543e6f54e57cfd5173f4335c6df33b507ce71fdbd8241a18d297a31c888932cf37c11dd390b73c4e1d271669cbf7a53f2cd4ee3bf613d0f65d03f14bc2ac9cd15ee151b9d23fa2c7cabcea6e03e97be41e8dab4adb7b5a9f837045bb391f04d43c6d629c0602db5ecdb99448f9788c88182913a107fc82d6449458193789de09f3d4367605edc330fc1bfdf0e93fce08e07950314af19569599ed1783dd15658346d4582f46ebbef1811f1cc824d09de4645514f4c3f0b89f6d9349faa665bbd221ee23f05f89f19cb26467fb3fd519d36ba92ac57e5a18a454461ef5ac9c412df753a20d12a43363595b97edfbe730d187376bfdf79b504315e07a09114af63f2af20109641279bfe22b127d5f5b0a21f12e6256d36a855bb393e15681ff94dcf43bc3aa',
  })
  await expect(product.settle()).to.not.be.reverted
  const nextVersion = await product['latestVersion()']()

  expect(nextVersion).to.equal(latestVersion.add(1))
  expectPositionEq(await product.positionAtVersion(nextVersion), {
    maker: POSITION.add(latestPosition.maker),
    taker: POSITION.add(latestPosition.taker),
  })

  await expect(product.settleAccount(userA.address)).to.not.be.reverted
  expect(await product['latestVersion(address)'](userA.address)).to.equal(nextVersion)
  expectPositionEq(await product.position(userA.address), { maker: POSITION, taker: 0 })

  await expect(product.settleAccount(userB.address)).to.not.be.reverted
  expect(await product['latestVersion(address)'](userB.address)).to.equal(nextVersion)
  expectPositionEq(await product.position(userB.address), { maker: 0, taker: POSITION })

  await expect(collateral.connect(userA).withdrawTo(userA.address, product.address, utils.parseEther('10'))).to.not.be
    .reverted
  await expect(collateral.connect(userB).withdrawTo(userB.address, product.address, utils.parseEther('10'))).to.not.be
    .reverted
}
