import { expect, util } from 'chai'
import { utils, constants } from 'ethers'
import HRE from 'hardhat'
import { impersonateWithBalance } from '../../../../common/testutil/impersonate'
import { expectPositionEq } from '../../../../common/testutil/types'
import { Collateral__factory, IERC20Metadata__factory, Product } from '../../../types/generated'
import { setupTokenHolders } from '../../integration/helpers/setupHelpers'
import { Deployment } from 'hardhat-deploy/types'
import { SignerWithAddress } from '@nomiclabs/hardhat-ethers/signers'
import { time } from '../../../../common/testutil'

const { ethers, config } = HRE

const ETH_AGGREGATOR_TRANSMITTER = '0xc4b732fd121f2f3783a9ac2a6c62fd535fd13fda'
const ETH_AGGREGATOR_ADDRESS = '0x37bc7498f4ff12c19678ee8fe19d713b87f6a9e6'
const POSITION = utils.parseEther('0.01')

export default async function opensPositions(
  product: Product,
  signer: SignerWithAddress,
  deployments: { [name: string]: Deployment },
): Promise<void> {
  await time.reset(config)

  const transmitterSigner = await impersonateWithBalance(ETH_AGGREGATOR_TRANSMITTER, utils.parseEther('10'))

  const collateral = Collateral__factory.connect(deployments['Collateral_Proxy'].address, signer)
  const dsu = IERC20Metadata__factory.connect(deployments['DSU'].address, signer)

  const [, userA, userB] = await ethers.getSigners()
  const { dsuHolder } = await setupTokenHolders(dsu, [])

  await dsu.connect(dsuHolder).approve(collateral.address, constants.MaxUint256)
  await collateral.connect(dsuHolder).depositTo(userA.address, product.address, utils.parseEther('1000'))
  await collateral.connect(dsuHolder).depositTo(userB.address, product.address, utils.parseEther('1000'))

  await expect(product.connect(userA).openMake(POSITION)).to.not.be.reverted
  await expect(product.connect(userB).openTake(POSITION)).to.not.be.reverted

  const pre = await product['pre()']()
  expectPositionEq(pre.openPosition, { maker: POSITION, taker: POSITION })
  expectPositionEq(pre.closePosition, { maker: 0, taker: 0 })

  const latestVersion = await product['latestVersion()']()
  // Push a new price version to the aggregator
  await transmitterSigner.sendTransaction({
    to: ETH_AGGREGATOR_ADDRESS,
    value: 0,
    data: '0xc9807539000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000680010100000001010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004600000000000000000000000d02ee3e7b93bbe024d583e46d7fe544500000442041511191a17051b031c1e0c0d0a060e12001d081302070b0f09041418161001000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000001f0000000000000000000000000000000000000000000000000000001e0d9083ed0000000000000000000000000000000000000000000000000000001e0da051bd0000000000000000000000000000000000000000000000000000001e0dc49f610000000000000000000000000000000000000000000000000000001e0e171efb0000000000000000000000000000000000000000000000000000001e0e5d9c810000000000000000000000000000000000000000000000000000001e0e5d9c810000000000000000000000000000000000000000000000000000001e0e5d9c810000000000000000000000000000000000000000000000000000001e0e5d9c810000000000000000000000000000000000000000000000000000001e0e5d9c810000000000000000000000000000000000000000000000000000001e0e5d9c810000000000000000000000000000000000000000000000000000001e0e5d9c810000000000000000000000000000000000000000000000000000001e0e5d9c810000000000000000000000000000000000000000000000000000001e0e5e04d90000000000000000000000000000000000000000000000000000001e0e81ee180000000000000000000000000000000000000000000000000000001e0eae2cfe0000000000000000000000000000000000000000000000000000001e0ecfc9600000000000000000000000000000000000000000000000000000001e0ee668c00000000000000000000000000000000000000000000000000000001e0f49db600000000000000000000000000000000000000000000000000000001e0f607ac00000000000000000000000000000000000000000000000000000001e0f607ac00000000000000000000000000000000000000000000000000000001e0f607ac00000000000000000000000000000000000000000000000000000001e0f84a4900000000000000000000000000000000000000000000000000000001e0f8e41800000000000000000000000000000000000000000000000000000001e0fcb4a800000000000000000000000000000000000000000000000000000001e0fd7f4b00000000000000000000000000000000000000000000000000000001e0fd7f4b00000000000000000000000000000000000000000000000000000001e10361a400000000000000000000000000000000000000000000000000000001e10a2a53c0000000000000000000000000000000000000000000000000000001e10a2a53c0000000000000000000000000000000000000000000000000000001e10a2a53c0000000000000000000000000000000000000000000000000000001e10a2a53c000000000000000000000000000000000000000000000000000000000000000b6686251d24ab82cfbe2251d5595d8d401da94cfbdd16e1484e2e89a6d36672d77aca98430781cfeac15d20ace1d9a77babf05afb13b23ec5da685e5e4768b8f15f23288f308e0f4715edf7c52d90a8228d001fe538c6cc561e4285f71baf32b3af7eefb0ce283236a1641bd5c6e450c46e9a2c7dd86520df4d5fb3ff35ac032220c528842a77768775af8159045051f9b5165fa1f3d37bbd5f54877b19d6d67ffb8ed8c653d6e8f109a58666b9fee90372ff68d9701421e5a13b1366cf5e5915dc75847cc3be24547eff0720618b8c2780742ca82e408dc4a15c6396a118b4e49a7f85da7ca603aa77fe5cb06381a5a45e4757f3b144e7254a257f993e07429ee8a17d5edd0460861afb7a6c181486a7001230bdb01781d56ac671c912fa164a968bb99eed41b89be2757a6b87e2503885ece22e9090aa9041c17e5a4dee300244595d32ef1b0260c81dce229b38f51f05a3ae4fbda196a9d8292d350ef91258000000000000000000000000000000000000000000000000000000000000000b0663c42be8ff5c7eba6eab51c7fa7f4f0441b24c1324938abaf8a02a9747339407744a1e2b209f9ee6e41dea0e1475b0f40ce7bd6126dd53b2f3c9e75b0f92fe2986fb7f62363d5a1a2d9e07245f3cc4c36849f5506b9675c95dddd3a0b0f9b0204ff9ef94765acc1b30c4ed5e970c3019c2017ec41aed89cf73504dcdafd7b32509a94ade4bcd9c7e056e7055fd95a9a061d9b52e67bbcade4051a5980ed77e738168c7f9262757da732879d1c3b147fc9253e8ca22598291dc17e10f17bc8303b5fc2d8b1f9bcf369f5b677c250b83f40c368eeefeb68c72819a4b7c4dcb2130abd820c9627dfe41e75cba03d2018b13f264a610edb34a193afdd68a2a51205bc2ff812814c30138dd7b12dfbfe8e46d687134c46a086bc59dbf3ca7751ecb46c659f136447b9b7c560b7c6b836d886233019bf99c3dad3364eabe70f56fb934742562d613a058df445124bc788ef4f9459ea53236ad858bf5bbc0152b93f3',
  })
  await expect(product.settle()).to.not.be.reverted
  const nextVersion = await product['latestVersion()']()

  expect(nextVersion).to.equal(latestVersion.add(1))
  expectPositionEq(await product.positionAtVersion(nextVersion), {
    maker: POSITION,
    taker: POSITION,
  })

  await expect(product.settleAccount(userA.address)).to.not.be.reverted
  expect(await product['latestVersion(address)'](userA.address)).to.equal(nextVersion)
  expectPositionEq(await product.position(userA.address), { maker: POSITION, taker: 0 })

  await expect(product.settleAccount(userB.address)).to.not.be.reverted
  expect(await product['latestVersion(address)'](userB.address)).to.equal(nextVersion)
  expectPositionEq(await product.position(userB.address), { maker: 0, taker: POSITION })
}
