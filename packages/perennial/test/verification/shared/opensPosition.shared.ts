import { expect, util } from 'chai'
import { utils, constants } from 'ethers'
import HRE from 'hardhat'
import { impersonateWithBalance } from '../../../../common/testutil/impersonate'
import { expectPositionEq } from '../../../../common/testutil/types'
import { Collateral__factory, IERC20Metadata__factory, Product } from '../../../types/generated'
import { setupTokenHolders } from '../../integration/helpers/setupHelpers'
import { Deployment } from 'hardhat-deploy/types'
import { SignerWithAddress } from '@nomiclabs/hardhat-ethers/signers'
import { time } from '../../../../common/testutil'

const { ethers, config } = HRE

const ETH_AGGREGATOR_TRANSMITTER = '0x218b5a7861dbf368d09a84e0dbff6c6ddbf99db8'
const ETH_AGGREGATOR_ADDRESS = '0x37bc7498f4ff12c19678ee8fe19d713b87f6a9e6'
const POSITION = utils.parseEther('0.01')

export default async function opensPositions(
  product: Product,
  signer: SignerWithAddress,
  deployments: { [name: string]: Deployment },
): Promise<void> {
  await time.reset(config)

  const transmitterSigner = await impersonateWithBalance(ETH_AGGREGATOR_TRANSMITTER, utils.parseEther('10'))

  const collateral = Collateral__factory.connect(deployments['Collateral_Proxy'].address, signer)
  const dsu = IERC20Metadata__factory.connect(deployments['DSU'].address, signer)

  const [, userA, userB] = await ethers.getSigners()
  const { dsuHolder } = await setupTokenHolders(dsu, [])

  await dsu.connect(dsuHolder).approve(collateral.address, constants.MaxUint256)
  await collateral.connect(dsuHolder).depositTo(userA.address, product.address, utils.parseEther('1000'))
  await collateral.connect(dsuHolder).depositTo(userB.address, product.address, utils.parseEther('1000'))

  await expect(product.connect(userA).openMake(POSITION)).to.not.be.reverted
  await expect(product.connect(userB).openTake(POSITION)).to.not.be.reverted

  const pre = await product['pre()']()
  expectPositionEq(pre.openPosition, { maker: POSITION, taker: POSITION })
  expectPositionEq(pre.closePosition, { maker: 0, taker: 0 })

  const latestVersion = await product['latestVersion()']()
  const latestPosition = await product.positionAtVersion(latestVersion)
  // Push a new price version to the aggregator
  await transmitterSigner.sendTransaction({
    to: ETH_AGGREGATOR_ADDRESS,
    value: 0,
    data: '0xc9807539000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000680010001000001010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004600000000000000000000000d02ee3e7b93bbe024d583e46d7fe54450000092f04020719061e051c1b17091d0f0d080c1304110a03141200180b011a100e1516000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000001f0000000000000000000000000000000000000000000000000000001c990f48c00000000000000000000000000000000000000000000000000000001c991147050000000000000000000000000000000000000000000000000000001c995123660000000000000000000000000000000000000000000000000000001c99bec2a00000000000000000000000000000000000000000000000000000001c99c663c00000000000000000000000000000000000000000000000000000001c99c663c00000000000000000000000000000000000000000000000000000001c99c663c00000000000000000000000000000000000000000000000000000001c99c663c00000000000000000000000000000000000000000000000000000001c99c663c00000000000000000000000000000000000000000000000000000001c99c663c00000000000000000000000000000000000000000000000000000001c9a45cd960000000000000000000000000000000000000000000000000000001c9a45cd960000000000000000000000000000000000000000000000000000001c9a8cc1000000000000000000000000000000000000000000000000000000001c9aab45800000000000000000000000000000000000000000000000000000001c9aab45800000000000000000000000000000000000000000000000000000001c9aab45800000000000000000000000000000000000000000000000000000001c9aab45800000000000000000000000000000000000000000000000000000001c9aab45800000000000000000000000000000000000000000000000000000001c9ac5376d0000000000000000000000000000000000000000000000000000001c9ac5376d0000000000000000000000000000000000000000000000000000001c9adad2840000000000000000000000000000000000000000000000000000001c9b39f1960000000000000000000000000000000000000000000000000000001c9b80e5000000000000000000000000000000000000000000000000000000001c9baeabc00000000000000000000000000000000000000000000000000000001c9bf6e2690000000000000000000000000000000000000000000000000000001c9bf6e2690000000000000000000000000000000000000000000000000000001c9bf6e2690000000000000000000000000000000000000000000000000000001c9c0dbe9e0000000000000000000000000000000000000000000000000000001c9c3c93e00000000000000000000000000000000000000000000000000000001c9c6d67e00000000000000000000000000000000000000000000000000000001ca9ac9d74000000000000000000000000000000000000000000000000000000000000000b06ac25894fdb50f87b2a6ef764d4b5788a8a2a5f072de7a85e2a50f1669691c6678fb5f3c2c8cb8edcf42995e90e25c176da85702e22daf9fdb2645c8cde31abb2b0b64dfbc84d5e2dfaa9a45b1f2e01cd8999b18ce913305470559dfc47dea65b8232551287b33c2b52075d56470440d7c076670a6a19563f70ef967eece4d6f97f9f954af8b119d0f70dea1163375e11f85fc90e71e4511188177c3009c25218e328b1df738bc1d38d0442331b8d1ba8a09df6090b3d6f250160692c2311ff69ca28ad02be84e11f74e3e6de1002f8e6b165d9b508a658b1c982b28d2a5c5de66fdb0df878827dc8444039ab6394ec2f21306a2549417212364fa8088bf198431e768aeaca89decbae36d4028df893c902cde2e0c2a41307af5250ef5134f29de5e19d21124cb8d3230f9da058978153413f9c35363d38d1da35e3c96d359e6b785552bdedf6c46b43b4751969c1400e9a93f6708a691b02d8a81cfb44e4b8000000000000000000000000000000000000000000000000000000000000000b206f59585387d6f64b7669447eaab0f1e093b782d46c1af79261c49f3fd081493ae2396cbf8d0b012d4d8ebeea4f05e97d22ebd9029a563671024ca0dd5ee7dc19943b05a2b85d7ec1ad2d19f5b32757deee8d989998d5e43aba8412289bcb69491962971be53e2887040f143f215a9deb14cb4ed5ea3703dabe2e64ee15e33674b430895ae2bbb61bfea383aca2d9fb5f7a96b63b4f024aad18fca8175ea6c71928b7c37b91aa4d16739dd74a5b1b3dfd061dda416382100d079b059a82618271806cddb02247c2a9635bd5e7b5d7bd1134e8864308fd7fdb0ce722a74c88214139ef60bbe5dfa249eea853b31a3790a0c07a61808415fb5f2bb6133ca2dd2b425e794d96da20cacb7a6ac8e1922ffcf3d37dad56c5e601f63927270aa4a4f1511fbdbbabd25aee7c2d6a8b2738702892c0c8ffad41c05f79ad3f48ff4c601a63e7163d39328965efb41214024c531905b2aa42570448a45fabccb939b33f25',
  })
  await expect(product.settle()).to.not.be.reverted
  const nextVersion = await product['latestVersion()']()

  expect(nextVersion).to.equal(latestVersion.add(1))
  expectPositionEq(await product.positionAtVersion(nextVersion), {
    maker: POSITION.add(latestPosition.maker),
    taker: POSITION.add(latestPosition.taker),
  })

  await expect(product.settleAccount(userA.address)).to.not.be.reverted
  expect(await product['latestVersion(address)'](userA.address)).to.equal(nextVersion)
  expectPositionEq(await product.position(userA.address), { maker: POSITION, taker: 0 })

  await expect(product.settleAccount(userB.address)).to.not.be.reverted
  expect(await product['latestVersion(address)'](userB.address)).to.equal(nextVersion)
  expectPositionEq(await product.position(userB.address), { maker: 0, taker: POSITION })

  await expect(collateral.connect(userA).withdrawTo(userA.address, product.address, utils.parseEther('10'))).to.not.be
    .reverted
  await expect(collateral.connect(userB).withdrawTo(userB.address, product.address, utils.parseEther('10'))).to.not.be
    .reverted
}
