import { expect, util } from 'chai'
import { utils, constants } from 'ethers'
import HRE from 'hardhat'
import { impersonateWithBalance } from '../../../../common/testutil/impersonate'
import { expectPositionEq } from '../../../../common/testutil/types'
import { Collateral__factory, IERC20Metadata__factory, Product } from '../../../types/generated'
import { setupTokenHolders } from '../../integration/helpers/setupHelpers'
import { Deployment } from 'hardhat-deploy/types'
import { SignerWithAddress } from '@nomiclabs/hardhat-ethers/signers'
import { time } from '../../../../common/testutil'

const { ethers, config } = HRE

const ETH_AGGREGATOR_TRANSMITTER = '0x218b5a7861dbf368d09a84e0dbff6c6ddbf99db8'
const ETH_AGGREGATOR_ADDRESS = '0x37bc7498f4ff12c19678ee8fe19d713b87f6a9e6'
const POSITION = utils.parseEther('0.01')

export default async function opensPositions(
  product: Product,
  signer: SignerWithAddress,
  deployments: { [name: string]: Deployment },
): Promise<void> {
  await time.reset(config)

  const transmitterSigner = await impersonateWithBalance(ETH_AGGREGATOR_TRANSMITTER, utils.parseEther('10'))

  const collateral = Collateral__factory.connect(deployments['Collateral_Proxy'].address, signer)
  const dsu = IERC20Metadata__factory.connect(deployments['DSU'].address, signer)

  const [, userA, userB] = await ethers.getSigners()
  const { dsuHolder } = await setupTokenHolders(dsu, [])

  await dsu.connect(dsuHolder).approve(collateral.address, constants.MaxUint256)
  await collateral.connect(dsuHolder).depositTo(userA.address, product.address, utils.parseEther('1000'))
  await collateral.connect(dsuHolder).depositTo(userB.address, product.address, utils.parseEther('1000'))

  await expect(product.connect(userA).openMake(POSITION)).to.not.be.reverted
  await expect(product.connect(userB).openTake(POSITION)).to.not.be.reverted

  const pre = await product['pre()']()
  expectPositionEq(pre.openPosition, { maker: POSITION, taker: POSITION })
  expectPositionEq(pre.closePosition, { maker: 0, taker: 0 })

  const latestVersion = await product['latestVersion()']()
  const latestPosition = await product.positionAtVersion(latestVersion)
  // Push a new price version to the aggregator
  await transmitterSigner.sendTransaction({
    to: ETH_AGGREGATOR_ADDRESS,
    value: 0,
    data: '0xc9807539000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000680010100000101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004600000000000000000000000d02ee3e7b93bbe024d583e46d7fe54450000601c051d03171e180d1907130e0a0814150010041b1a01110f1c0b02090c06051612000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000001f000000000000000000000000000000000000000000000000000000261c722580000000000000000000000000000000000000000000000000000000261ccdb300000000000000000000000000000000000000000000000000000000261ccdb300000000000000000000000000000000000000000000000000000000261cea56ad000000000000000000000000000000000000000000000000000000261d354e70000000000000000000000000000000000000000000000000000000261d83f534000000000000000000000000000000000000000000000000000000261db3aa44000000000000000000000000000000000000000000000000000000261db3aa44000000000000000000000000000000000000000000000000000000261db94b80000000000000000000000000000000000000000000000000000000261e074858000000000000000000000000000000000000000000000000000000261e0b5768000000000000000000000000000000000000000000000000000000261e535722000000000000000000000000000000000000000000000000000000261ea691b0000000000000000000000000000000000000000000000000000000261ec53d40000000000000000000000000000000000000000000000000000000261ec53d40000000000000000000000000000000000000000000000000000000261ecf5b9f000000000000000000000000000000000000000000000000000000261ed47f80000000000000000000000000000000000000000000000000000000261ef30400000000000000000000000000000000000000000000000000000000261ef30400000000000000000000000000000000000000000000000000000000261f5634aa000000000000000000000000000000000000000000000000000000261f8b9a80000000000000000000000000000000000000000000000000000000261fc8a380000000000000000000000000000000000000000000000000000000261ff5504400000000000000000000000000000000000000000000000000000026201fb0a8000000000000000000000000000000000000000000000000000000262042b5800000000000000000000000000000000000000000000000000000002620f8bf1000000000000000000000000000000000000000000000000000000026210912c000000000000000000000000000000000000000000000000000000026213e7aa000000000000000000000000000000000000000000000000000000026214118e1000000000000000000000000000000000000000000000000000000262173e280000000000000000000000000000000000000000000000000000000262173e280000000000000000000000000000000000000000000000000000000000000000b9f8cb8391fdebaaf311d7e4ebc40ae0c9c529d25bfd7ecf47e737a63b374deea6880211f91fe4a42c4b4fc806b1e5cbda8af793bd00fc7893b76b2ab30b34c661ca151ba5e0cd00c71e8da52819c7f9efd32f1c9647f13968b976289beff5f0ffb299632534ca5165724726800a17caa0f0a9007143a60d29de5b7aa3f4af3cc45c0e5f57cc21d918d3b348e6bab26e3510366c3eeef877c6f75044616efe71d59ef276c36822ac1a29438ee1c2a5e71736a859fa21cebd301f3017d15b546adb496508ab6ae202522cf65512475065228cdbd256cdc87a960636de48696f0270c5bc8fbc9d520393fed5aa5b9662267ca6794acbed717255649e72e28478b7a365d6527524e180c09a50d5c36fecb0bed62c8949ad98e584031608e6efa31c470789f0afbde80db7851764129c831ac59f34395e587c64b914b23d5adee0c29d8a8933fe8b19e7c4c5517e74994c42880e729b288f2f84148e8fa0d11bc24c0000000000000000000000000000000000000000000000000000000000000000b06a260a12381c86af76e7a22ecd43cac511a318ffe7e0f1c1ce859c99b8b6a947bf2c91c4d94f13d82da2dc5424ba0145951e754e79540b50b2712db634e261821efbdbfce77c8e74126ecc0a95a3001354fe9222497f5e3440f332e999c3f04047d904c11f76f3e6049fd47d2257966a681dc6dd0afce9881b75f7288a2be756d2e36e3c506ab138949a9a36a7b307473edfa47df7ffadb1683bb526026f87a48b785b6866da7e9c2edb71812fab04e69ab1de39c6b6656f61102102d87016015b1d4228b5a81535ce62e343daf44d7bdbc4725571bcf19ce9b0f332ab0f58343d5eda2bd8fd8b53442dd95a8ca874226f2b783d88ba7f347777b0b88fcfee91d5cdae948a44c53b16b2a8c6c6cf3cc4725d87c5872243ae1c6f5a8468ccbd94d2ae727e1171f1e8121e15cef558fe5605276c284855b95e6a2c6ad1c2da9910842012b1a1155307c50f8553c0c2cb5847f4887d47cd9a416b50b55fcfae557',
  })
  await expect(product.settle()).to.not.be.reverted
  const nextVersion = await product['latestVersion()']()

  expect(nextVersion).to.equal(latestVersion.add(1))
  expectPositionEq(await product.positionAtVersion(nextVersion), {
    maker: POSITION.add(latestPosition.maker),
    taker: POSITION.add(latestPosition.taker),
  })

  await expect(product.settleAccount(userA.address)).to.not.be.reverted
  expect(await product['latestVersion(address)'](userA.address)).to.equal(nextVersion)
  expectPositionEq(await product.position(userA.address), { maker: POSITION, taker: 0 })

  await expect(product.settleAccount(userB.address)).to.not.be.reverted
  expect(await product['latestVersion(address)'](userB.address)).to.equal(nextVersion)
  expectPositionEq(await product.position(userB.address), { maker: 0, taker: POSITION })

  await expect(collateral.connect(userA).withdrawTo(userA.address, product.address, utils.parseEther('10'))).to.not.be
    .reverted
  await expect(collateral.connect(userB).withdrawTo(userB.address, product.address, utils.parseEther('10'))).to.not.be
    .reverted
}
